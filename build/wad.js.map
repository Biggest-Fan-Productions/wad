{"version":3,"sources":["webpack://Wad/webpack/universalModuleDefinition","webpack://Wad/webpack/bootstrap","webpack://Wad/./node_modules/tunajs/tuna.js","webpack://Wad/(webpack)/buildin/harmony-module.js","webpack://Wad/./src/audio_listener.js","webpack://Wad/./src/sound_iterator.js","webpack://Wad/./src/wad.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,QAAQ,KAA6B;AACrC;AACA,KAAK,UAAU,IAA4B;AAC3C;AACA,KAAK,MAAM,EAEN;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAwD;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,6DAA6D;AAC7D;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,uDAAuD;AACvD;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B,WAAW;AAC1C,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACtuED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;AC9DA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,yCAAyC,kDAAkD;AAC3F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACa;;AAEb,mCAAmC,mFAAmF,wCAAwC,EAAE,OAAO,8BAA8B,EAAE;;AAEvM,iDAAiD,2CAA2C,0DAA0D,EAAE;;AAExJ,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE;;AAE3T,6DAA6D,sEAAsE,8DAA8D,oBAAoB;;AAErN,2CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAE/M;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;;AAEnB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK,EAAE;;AAEP,4CAA4C;;AAE5C;AACA;AACA,mBAAmB;;AAEnB,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACc,4EAAa,E;;;;;;;;;;;;AClN5B;AAAA;AAAA;AAAA;AAAA;AAA0B;AACkB;AACA;;;;AAI5C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,S;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL,uBAAuB,mDAAmD;AAC1E,UAAU,2DAA2D;;;AAGrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,4BAA4B,mBAAmB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;;AAEA,iCAAiC,gBAAgB;AACjD;AACA,wCAAwC,+BAA+B;AACvE,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,+BAA+B;AAC3E,qDAAqD,iBAAiB;AACtE,uIAAuI;AACvI;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA,SAAS,yBAAyB,0DAA0D,EAAE,EAAE;AAChG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,0CAA0C,0BAA0B;;AAEpE,0CAA0C,8BAA8B;;AAExE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oEAAoE;AACpE,2DAA2D;AAC3D;AACA,+BAA+B;AAC/B;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA,qCAAqC,2DAA2D;AAChG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAa;AACpC,gBAAgB,6CAAI;AACpB,uBAAuB,6CAAI;AAC3B;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,yCAAyC;AACzC,6CAA6C,iCAAiC;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,cAAc;AACd;AACA,8BAA8B,cAAc;AAC5C,+BAA+B,0BAA0B;AACzD,kBAAkB,kCAAkC;AACpD;;;AAGA,iCAAiC,2DAA2D;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC,8BAA8B;;AAE9D;AACA;AACA;;;AAGA;;AAEA;;AAEA,sDAAsD,sBAAsB;AAC5E;;AAEA;AACA,iCAAiC,+BAA+B;;AAEhE;AACA,iCAAiC,+BAA+B;;AAEhE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,6BAA6B,oBAAoB;;AAEjD;;AAEA;;;AAGA;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC,iDAAiD;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;;AAEtB,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,uBAAuB;AAC7D;;AAEA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,UAAU;AAC/B;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sDAAsD;;AAEtD;AACA,4BAA4B,0BAA0B;;AAEtD,4BAA4B,8BAA8B;;AAE1D;;AAEA;AACA;AACA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;;AAEA;AACA,mBAAmB,uDAAa;AAChC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA,8DAA8D,qBAAqB;AACnF;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,2CAA2C;AAC3C;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACbuDAAuD;AACvD;AACA,uDAAuD;;AAEvD,SAAS;;AAET;AACA;AACA,2BAA2B,8BAA8B;AACzD,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,kBAAkB;AAClB;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,6CAA6C,oCAAoC;AACjF,gDAAgD,qCAAqC;AACrF;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA,6DAA6D;AAC7D;AACA;AACA,qCAAqC;AACrC,wBAAwB,2BAA2B;AACnD,sDAAsD;AACtD;AACA,kCAAkC;AAClC,0CAA0C;AAC1C,2EAA2E;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,uBAAuB,0BAA0B,sEAAsE,YAAY,4CAA4C,EAAE;AACjL,iBAAiB,0BAA0B,oEAAoE,YAAY,8CAA8C,EAAE;AAC3K,qBAAqB,0BAA0B,sEAAsE,YAAY,6CAA6C,EAAE;AAChL,iBAAiB,wCAAwC,qEAAqE,YAAY,kDAAkD,gCAAgC,EAAE,aAAa,yCAAyC,EAAE;AACtR,iBAAiB,yCAAyC,sEAAsE,YAAY,qDAAqD,+BAA+B,EAAE;AAClO;;AAEA;;AAEA;;;AAGA,CAAC;;AAED,GAAG,KAA6B;AAChC;AACA;;AAEe,kEAAG,EAAC","file":"wad.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Wad\"] = factory();\n\telse\n\t\troot[\"Wad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/wad.js\");\n","/*\r\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\r\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n/*global module*/\r\n(function() {\r\n\r\n    var userContext,\r\n        userInstance,\r\n        pipe = function(param, val) {\r\n            param.value = val;\r\n        },\r\n        Super = Object.create(null, {\r\n            activate: {\r\n                writable: true,\r\n                value: function(doActivate) {\r\n                    if (doActivate) {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.activateNode);\r\n                        if (this.activateCallback) {\r\n                            this.activateCallback(doActivate);\r\n                        }\r\n                    } else {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.output);\r\n                    }\r\n                }\r\n            },\r\n            bypass: {\r\n                get: function() {\r\n                    return this._bypass;\r\n                },\r\n                set: function(value) {\r\n                    if (this._lastBypassValue === value) {\r\n                        return;\r\n                    }\r\n                    this._bypass = value;\r\n                    this.activate(!value);\r\n                    this._lastBypassValue = value;\r\n                }\r\n            },\r\n            connect: {\r\n                value: function(target) {\r\n                    this.output.connect(target);\r\n                }\r\n            },\r\n            disconnect: {\r\n                value: function(target) {\r\n                    this.output.disconnect(target);\r\n                }\r\n            },\r\n            connectInOrder: {\r\n                value: function(nodeArray) {\r\n                    var i = nodeArray.length - 1;\r\n                    while (i--) {\r\n                        if (!nodeArray[i].connect) {\r\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\r\n                        }\r\n                        if (nodeArray[i + 1].input) {\r\n                            nodeArray[i].connect(nodeArray[i + 1].input);\r\n                        } else {\r\n                            nodeArray[i].connect(nodeArray[i + 1]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            getDefaults: {\r\n                value: function() {\r\n                    var result = {};\r\n                    for (var key in this.defaults) {\r\n                        result[key] = this.defaults[key].value;\r\n                    }\r\n                    return result;\r\n                }\r\n            },\r\n            automate: {\r\n                value: function(property, value, duration, startTime) {\r\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\r\n                        dur = duration ? ~~(duration / 1000) : 0,\r\n                        _is = this.defaults[property],\r\n                        param = this[property],\r\n                        method;\r\n\r\n                    if (param) {\r\n                        if (_is.automatable) {\r\n                            if (!duration) {\r\n                                method = \"setValueAtTime\";\r\n                            } else {\r\n                                method = \"linearRampToValueAtTime\";\r\n                                param.cancelScheduledValues(start);\r\n                                param.setValueAtTime(param.value, start);\r\n                            }\r\n                            param[method](value, dur + start);\r\n                        } else {\r\n                            param = value;\r\n                        }\r\n                    } else {\r\n                        console.error(\"Invalid Property for \" + this.name);\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n        FLOAT = \"float\",\r\n        BOOLEAN = \"boolean\",\r\n        STRING = \"string\",\r\n        INT = \"int\";\r\n\r\n    if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = Tuna;\r\n    } else if (typeof define === \"function\") {\r\n        window.define(\"Tuna\", definition);\r\n    } else {\r\n        window.Tuna = Tuna;\r\n    }\r\n\r\n    function definition() {\r\n        return Tuna;\r\n    }\r\n\r\n    function Tuna(context) {\r\n        if (!(this instanceof Tuna)) {\r\n            return new Tuna(context);\r\n        }\r\n\r\n        var _window = typeof window === \"undefined\" ? {} : window;\r\n\r\n        if (!_window.AudioContext) {\r\n            _window.AudioContext = _window.webkitAudioContext;\r\n        }\r\n        if (!context) {\r\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\r\n            context = _window.AudioContext && (new _window.AudioContext());\r\n        }\r\n        if (!context) {\r\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\r\n        }\r\n        connectify(context);\r\n        userContext = context;\r\n        userInstance = this;\r\n    }\r\n\r\n    function connectify(context) {\r\n        if (context.__connectified__ === true) return;\r\n\r\n        var gain = context.createGain(),\r\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\r\n            oconnect = proto.connect;\r\n\r\n        proto.connect = shimConnect;\r\n        context.__connectified__ = true; // Prevent overriding connect more than once\r\n\r\n        function shimConnect() {\r\n            var node = arguments[0];\r\n            arguments[0] = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\r\n            oconnect.apply(this, arguments);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    function dbToWAVolume(db) {\r\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\r\n    }\r\n\r\n    function fmod(x, y) {\r\n        // http://kevin.vanzonneveld.net\r\n        // *     example 1: fmod(5.7, 1.3);\r\n        // *     returns 1: 0.5\r\n        var tmp, tmp2, p = 0,\r\n            pY = 0,\r\n            l = 0.0,\r\n            l2 = 0.0;\r\n\r\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n\r\n        if (pY > p) {\r\n            p = pY;\r\n        }\r\n\r\n        tmp2 = (x % y);\r\n\r\n        if (p < -100 || p > 20) {\r\n            // toFixed will give an out of bound error so we fix it like this:\r\n            l = Math.round(Math.log(tmp2) / Math.log(10));\r\n            l2 = Math.pow(10, l);\r\n\r\n            return (tmp2 / l2).toFixed(l - p) * l2;\r\n        } else {\r\n            return parseFloat(tmp2.toFixed(-p));\r\n        }\r\n    }\r\n\r\n    function sign(x) {\r\n        if (x === 0) {\r\n            return 1;\r\n        } else {\r\n            return Math.abs(x) / x;\r\n        }\r\n    }\r\n\r\n    function tanh(n) {\r\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\r\n    }\r\n\r\n    function initValue(userVal, defaultVal) {\r\n        return userVal === undefined ? defaultVal : userVal;\r\n    }\r\n\r\n    Tuna.prototype.Bitcrusher = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var phaser = 0,\r\n            last = 0,\r\n            input, output, step, i, length;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n            output = e.outputBuffer.getChannelData(0),\r\n            step = Math.pow(1 / 2, this.bits);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                phaser += this.normfreq;\r\n                if (phaser >= 1.0) {\r\n                    phaser -= 1.0;\r\n                    last = step * Math.floor(input[i] / step + 0.5);\r\n                }\r\n                output[i] = last;\r\n            }\r\n        };\r\n\r\n        this.bits = properties.bits || this.defaults.bits.value;\r\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Bitcrusher\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bits: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 16,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                normfreq: {\r\n                    value: 0.1,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        bits: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.bits;\r\n            },\r\n            set: function(value) {\r\n                this.processor.bits = value;\r\n            }\r\n        },\r\n        normfreq: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.normfreq;\r\n            },\r\n            set: function(value) {\r\n                this.processor.normfreq = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Cabinet = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.convolver.input);\r\n        this.convolver.output.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n        //don't use makeupGain setter at init to avoid smoothing\r\n        this.makeupNode.gain.value = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Cabinet\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        newConvolver: {\r\n            value: function(impulsePath) {\r\n                return new userInstance.Convolver({\r\n                    impulse: impulsePath,\r\n                    dryLevel: 0,\r\n                    wetLevel: 1\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Chorus = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.attenuator = this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.delayL = userContext.createDelay();\r\n        this.delayR = userContext.createDelay();\r\n        this.feedbackGainNodeLR = userContext.createGain();\r\n        this.feedbackGainNodeRL = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.delayL.delayTime,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.delayR.delayTime,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.attenuator);\r\n        this.attenuator.connect(this.output);\r\n        this.attenuator.connect(this.splitter);\r\n        this.splitter.connect(this.delayL, 0);\r\n        this.splitter.connect(this.delayR, 1);\r\n        this.delayL.connect(this.feedbackGainNodeLR);\r\n        this.delayR.connect(this.feedbackGainNodeRL);\r\n        this.feedbackGainNodeLR.connect(this.delayR);\r\n        this.feedbackGainNodeRL.connect(this.delayL);\r\n        this.delayL.connect(this.merger, 0, 0);\r\n        this.delayR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.lfoR.phase = Math.PI / 2;\r\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Chorus\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                feedback: {\r\n                    value: 0.4,\r\n                    min: 0,\r\n                    max: 0.95,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                delay: {\r\n                    value: 0.0045,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 1.5,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delay: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delay;\r\n            },\r\n            set: function(value) {\r\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\r\n                this.lfoL.offset = this._delay;\r\n                this.lfoR.offset = this._delay;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        depth: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._depth * this._delay;\r\n                this.lfoR.oscillation = this._depth * this._delay;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeLR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n                this.feedbackGainNodeRL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Compressor = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.compNode.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value);\r\n\r\n        //don't use makeupGain setter at initialization to avoid smoothing\r\n        if (this.automakeup) {\r\n            this.makeupNode.gain.value = dbToWAVolume(this.computeMakeup());\r\n        } else {\r\n            this.makeupNode.gain.value = dbToWAVolume(initValue(properties.makeupGain, this.defaults.makeupGain.value));\r\n        }\r\n        this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\r\n        this.release = initValue(properties.release, this.defaults.release.value);\r\n        this.attack = initValue(properties.attack, this.defaults.attack.value);\r\n        this.ratio = properties.ratio || this.defaults.ratio.value;\r\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Compressor\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                threshold: {\r\n                    value: -20,\r\n                    min: -60,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                release: {\r\n                    value: 250,\r\n                    min: 10,\r\n                    max: 2000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                attack: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                ratio: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 50,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                knee: {\r\n                    value: 5,\r\n                    min: 0,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                automakeup: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        computeMakeup: {\r\n            value: function() {\r\n                var magicCoefficient = 4, // raise me if the output is too hot\r\n                    c = this.compNode;\r\n                return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\r\n            }\r\n        },\r\n        automakeup: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._automakeup;\r\n            },\r\n            set: function(value) {\r\n                this._automakeup = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        threshold: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.threshold;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.threshold.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        ratio: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.ratio;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.ratio.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        knee: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.knee;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.knee.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        attack: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.attack;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.attack.value = value / 1000;\r\n            }\r\n        },\r\n        release: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.release;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.release.value = value / 1000;\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.setTargetAtTime(dbToWAVolume(value), userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Convolver = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = userContext.createConvolver();\r\n        this.dry = userContext.createGain();\r\n        this.filterLow = userContext.createBiquadFilter();\r\n        this.filterHigh = userContext.createBiquadFilter();\r\n        this.wet = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filterLow);\r\n        this.activateNode.connect(this.dry);\r\n        this.filterLow.connect(this.filterHigh);\r\n        this.filterHigh.connect(this.convolver);\r\n        this.convolver.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        //don't use setters at init to avoid smoothing\r\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.filterHigh.frequency.value = properties.highCut || this.defaults.highCut.value;\r\n        this.filterLow.frequency.value = properties.lowCut || this.defaults.lowCut.value;\r\n        this.output.gain.value = initValue(properties.level, this.defaults.level.value);\r\n        this.filterHigh.type = \"lowpass\";\r\n        this.filterLow.type = \"highpass\";\r\n        this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Convolver\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                highCut: {\r\n                    value: 22050,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                lowCut: {\r\n                    value: 20,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                level: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        lowCut: {\r\n            get: function() {\r\n                return this.filterLow.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterLow.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        highCut: {\r\n            get: function() {\r\n                return this.filterHigh.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterHigh.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        level: {\r\n            get: function() {\r\n                return this.output.gain;\r\n            },\r\n            set: function(value) {\r\n                this.output.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        dryLevel: {\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        wetLevel: {\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        buffer: {\r\n            enumerable: false,\r\n            get: function() {\r\n                return this.convolver.buffer;\r\n            },\r\n            set: function(impulse) {\r\n                var convolver = this.convolver,\r\n                    xhr = new XMLHttpRequest();\r\n                if (!impulse) {\r\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\r\n                    return;\r\n                }\r\n                xhr.open(\"GET\", impulse, true);\r\n                xhr.responseType = \"arraybuffer\";\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\r\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\r\n                                convolver.buffer = buffer;\r\n                            }, function(e) {\r\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                xhr.send(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Delay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.dry = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.delay = userContext.createDelay(10);\r\n        this.feedbackNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.delay);\r\n        this.activateNode.connect(this.dry);\r\n        this.delay.connect(this.filter);\r\n        this.filter.connect(this.feedbackNode);\r\n        this.feedbackNode.connect(this.delay);\r\n        this.feedbackNode.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\r\n        //don't use setters at init to avoid smoothing\r\n        this.feedbackNode.gain.value = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.filter.frequency.value = properties.cutoff || this.defaults.cutoff.value;\r\n        this.filter.type = \"lowpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Delay\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTime: {\r\n                    value: 100,\r\n                    min: 20,\r\n                    max: 1000,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.45,\r\n                    min: 0,\r\n                    max: 0.9,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                cutoff: {\r\n                    value: 20000,\r\n                    min: 20,\r\n                    max: 20000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delayTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.delay.delayTime;\r\n            },\r\n            set: function(value) {\r\n                this.delay.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        dryLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.feedbackNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.feedbackNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Filter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filter);\r\n        this.filter.connect(this.output);\r\n\r\n        //don't use setters for freq and gain at init to avoid smoothing\r\n        this.filter.frequency.value = properties.frequency || this.defaults.frequency.value;\r\n        this.Q = properties.resonance || this.defaults.Q.value;\r\n        this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\r\n        this.filter.gain.value = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Filter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                frequency: {\r\n                    value: 800,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                Q: {\r\n                    value: 1,\r\n                    min: 0.001,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                gain: {\r\n                    value: 0,\r\n                    min: -40,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                filterType: {\r\n                    value: \"lowpass\",\r\n                    automatable: false,\r\n                    type: STRING\r\n                }\r\n            }\r\n        },\r\n        filterType: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.type;\r\n            },\r\n            set: function(value) {\r\n                this.filter.type = value;\r\n            }\r\n        },\r\n        Q: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.Q;\r\n            },\r\n            set: function(value) {\r\n                this.filter.Q.value = value;\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.gain;\r\n            },\r\n            set: function(value) {\r\n                this.filter.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        frequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Gain = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.gainNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.gainNode);\r\n        this.gainNode.connect(this.output);\r\n\r\n        //don't use setter at init to avoid smoothing\r\n        this.gainNode.gain.value = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Gain.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Gain\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                gain: {\r\n                    value: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.gainNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.gainNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.MoogFilter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var in1, in2, in3, in4, out1, out2, out3, out4;\r\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\r\n        var input, output, f, fb, i, length, inputFactor;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0);\r\n            output = e.outputBuffer.getChannelData(0);\r\n            f = this.cutoff * 1.16;\r\n            inputFactor = 0.35013 * (f * f) * (f * f);\r\n            fb = this.resonance * (1.0 - 0.15 * f * f);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                input[i] -= out4 * fb;\r\n                input[i] *= inputFactor;\r\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\r\n                in1 = input[i];\r\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\r\n                in2 = out1;\r\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\r\n                in3 = out2;\r\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\r\n                in4 = out3;\r\n                output[i] = out4;\r\n            }\r\n        };\r\n\r\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\r\n        this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"MoogFilter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                cutoff: {\r\n                    value: 0.065,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 3.5,\r\n                    min: 0.0,\r\n                    max: 4.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.cutoff;\r\n            },\r\n            set: function(value) {\r\n                this.processor.cutoff = value;\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.resonance;\r\n            },\r\n            set: function(value) {\r\n                this.processor.resonance = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Overdrive = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.inputDrive = userContext.createGain();\r\n        this.waveshaper = userContext.createWaveShaper();\r\n        this.outputDrive = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.inputDrive);\r\n        this.inputDrive.connect(this.waveshaper);\r\n        this.waveshaper.connect(this.outputDrive);\r\n        this.outputDrive.connect(this.output);\r\n\r\n        this.ws_table = new Float32Array(this.k_nSamples);\r\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\r\n        this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\r\n        this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\r\n        this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Overdrive\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                drive: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                outputGain: {\r\n                    value: 0,\r\n                    min: -46,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                curveAmount: {\r\n                    value: 0.725,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                algorithmIndex: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 5,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        k_nSamples: {\r\n            value: 8192\r\n        },\r\n        drive: {\r\n            get: function() {\r\n                return this.inputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._drive = value;\r\n            }\r\n        },\r\n        curveAmount: {\r\n            get: function() {\r\n                return this._curveAmount;\r\n            },\r\n            set: function(value) {\r\n                this._curveAmount = value;\r\n                if (this._algorithmIndex === undefined) {\r\n                    this._algorithmIndex = 0;\r\n                }\r\n                this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\r\n                this.waveshaper.curve = this.ws_table;\r\n            }\r\n        },\r\n        outputGain: {\r\n            get: function() {\r\n                return this.outputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._outputGain = dbToWAVolume(value);\r\n                this.outputDrive.gain.setValueAtTime(this._outputGain, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        algorithmIndex: {\r\n            get: function() {\r\n                return this._algorithmIndex;\r\n            },\r\n            set: function(value) {\r\n                this._algorithmIndex = value;\r\n                this.curveAmount = this._curveAmount;\r\n            }\r\n        },\r\n        waveshaperAlgorithms: {\r\n            value: [\r\n                function(amount, n_samples, ws_table) {\r\n                    amount = Math.min(amount, 0.9999);\r\n                    var k = 2 * amount / (1 - amount),\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\r\n                        ws_table[i] = tanh(y);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, a = 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\r\n                        ws_table[i] = tanh(y * 2);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        abx = Math.abs(x);\r\n                        if (abx < a) y = abx;\r\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\r\n                        else if (abx > 1) y = abx;\r\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\r\n                    var i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        if (x < -0.08905) {\r\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\r\n                        } else if (x >= -0.08905 && x < 0.320018) {\r\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\r\n                        } else {\r\n                            ws_table[i] = 0.630035;\r\n                        }\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var a = 2 + Math.round(amount * 14),\r\n                        // we go from 2 to 16 bits, keep in mind for the UI\r\n                        bits = Math.round(Math.pow(2, a - 1)),\r\n                        // real number of quantization steps divided by 2\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = Math.round(x * bits) / bits;\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Panner = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.panner = userContext.createStereoPanner();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.panner);\r\n        this.panner.connect(this.output);\r\n\r\n        this.pan = initValue(properties.pan, this.defaults.pan.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Panner.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Panner\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                pan: {\r\n                    value: 0.0,\r\n                    min: -1.0,\r\n                    max: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        pan: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.panner.pan;\r\n            },\r\n            set: function(value) {\r\n                this.panner.pan.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Phaser = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.filtersL = [];\r\n        this.filtersR = [];\r\n        this.feedbackGainNodeL = userContext.createGain();\r\n        this.feedbackGainNodeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.filteredSignal = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.filtersL,\r\n            callback: this.callback\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.filtersR,\r\n            callback: this.callback\r\n        });\r\n\r\n        var i = this.stage;\r\n        while (i--) {\r\n            this.filtersL[i] = userContext.createBiquadFilter();\r\n            this.filtersR[i] = userContext.createBiquadFilter();\r\n            this.filtersL[i].type = \"allpass\";\r\n            this.filtersR[i].type = \"allpass\";\r\n        }\r\n        this.input.connect(this.splitter);\r\n        this.input.connect(this.output);\r\n        this.splitter.connect(this.filtersL[0], 0, 0);\r\n        this.splitter.connect(this.filtersR[0], 1, 0);\r\n        this.connectInOrder(this.filtersL);\r\n        this.connectInOrder(this.filtersR);\r\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\r\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\r\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\r\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\r\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\r\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Phaser\"\r\n        },\r\n        stage: {\r\n            value: 4\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                rate: {\r\n                    value: 0.1,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.6,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 40,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                baseModulationFrequency: {\r\n                    value: 700,\r\n                    min: 500,\r\n                    max: 1500,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(filters, value) {\r\n                for (var stage = 0; stage < 4; stage++) {\r\n                    filters[stage].frequency.value = value;\r\n                }\r\n            }\r\n        },\r\n        depth: {\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\r\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\r\n            }\r\n        },\r\n        rate: {\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        baseModulationFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseModulationFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseModulationFrequency = value;\r\n                this.lfoL.offset = this._baseModulationFrequency;\r\n                this.lfoR.offset = this._baseModulationFrequency;\r\n                this.depth = this._depth;\r\n            }\r\n        },\r\n        feedback: {\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n                this.feedbackGainNodeR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR._phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.PingPongDelay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.stereoToMonoMix = userContext.createGain();\r\n        this.feedbackLevel = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.delayLeft = userContext.createDelay(10);\r\n        this.delayRight = userContext.createDelay(10);\r\n\r\n        this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.merger = userContext.createChannelMerger(2);\r\n\r\n        this.activateNode.connect(this.splitter);\r\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\r\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\r\n        this.stereoToMonoMix.gain.value = .5;\r\n        this.stereoToMonoMix.connect(this.wet);\r\n        this.wet.connect(this.delayLeft);\r\n        this.feedbackLevel.connect(this.wet);\r\n        this.delayLeft.connect(this.delayRight);\r\n        this.delayRight.connect(this.feedbackLevel);\r\n        this.delayLeft.connect(this.merger, 0, 0);\r\n        this.delayRight.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n        this.activateNode.connect(this.output);\r\n\r\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\r\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\r\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\r\n        this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"PingPongDelay\"\r\n        },\r\n        delayTimeLeft: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeLeft;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeLeft = value;\r\n                this.delayLeft.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        delayTimeRight: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeRight;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeRight = value;\r\n                this.delayRight.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.wet.gain;\r\n            },\r\n            set: function (value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }, \r\n        feedback: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.feedbackLevel.gain;\r\n            },\r\n            set: function (value) {\r\n                this.feedbackLevel.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTimeLeft: {\r\n                    value: 200,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                delayTimeRight: {\r\n                    value: 400,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                feedback: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Tremolo = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.amplitudeL = userContext.createGain();\r\n        this.amplitudeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.amplitudeL.gain,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.amplitudeR.gain,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.splitter);\r\n        this.splitter.connect(this.amplitudeL, 0);\r\n        this.splitter.connect(this.amplitudeR, 1);\r\n        this.amplitudeL.connect(this.merger, 0, 0);\r\n        this.amplitudeR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = properties.rate || this.defaults.rate.value;\r\n        this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.offset = 1 - (this.intensity / 2);\r\n        this.lfoR.offset = 1 - (this.intensity / 2);\r\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Tremolo\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                intensity: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 5,\r\n                    min: 0.1,\r\n                    max: 11,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        intensity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._intensity;\r\n            },\r\n            set: function(value) {\r\n                this._intensity = value;\r\n                this.lfoL.offset = 1 - this._intensity / 2;\r\n                this.lfoR.offset = 1 - this._intensity / 2;\r\n                this.lfoL.oscillation = this._intensity;\r\n                this.lfoR.oscillation = this._intensity;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR.phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.WahWah = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\r\n            target: this,\r\n            callback: function(context, value) {\r\n                context.sweep = value;\r\n            }\r\n        });\r\n        this.filterBp = userContext.createBiquadFilter();\r\n        this.filterPeaking = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        //Connect AudioNodes\r\n        this.activateNode.connect(this.filterBp);\r\n        this.filterBp.connect(this.filterPeaking);\r\n        this.filterPeaking.connect(this.output);\r\n\r\n        //Set Properties\r\n        this.init();\r\n        this.automode = initValue(properties.automode, this.defaults.automode.value);\r\n        this.resonance = properties.resonance || this.defaults.resonance.value;\r\n        this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\r\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\r\n        this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\r\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\r\n\r\n        this.activateNode.gain.value = 2;\r\n        this.envelopeFollower.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"WahWah\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                automode: {\r\n                    value: true,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                baseFrequency: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                excursionOctaves: {\r\n                    value: 2,\r\n                    min: 1,\r\n                    max: 6,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sweep: {\r\n                    value: 0.2,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 10,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sensitivity: {\r\n                    value: 0.5,\r\n                    min: -1,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        automode: {\r\n            get: function() {\r\n                return this._automode;\r\n            },\r\n            set: function(value) {\r\n                this._automode = value;\r\n                if (value) {\r\n                    this.activateNode.connect(this.envelopeFollower.input);\r\n                    this.envelopeFollower.activate(true);\r\n                } else {\r\n                    this.envelopeFollower.activate(false);\r\n                    this.activateNode.disconnect();\r\n                    this.activateNode.connect(this.filterBp);\r\n                }\r\n            }\r\n        },\r\n        filterFreqTimeout: {\r\n            value: 0\r\n        },\r\n        setFilterFreq: {\r\n            value: function() {\r\n                try {\r\n                    this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                    this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                } catch (e) {\r\n                    clearTimeout(this.filterFreqTimeout);\r\n                    //put on the next cycle to let all init properties be set\r\n                    this.filterFreqTimeout = setTimeout(function() {\r\n                        this.setFilterFreq();\r\n                    }.bind(this), 0);\r\n                }\r\n            }\r\n        },\r\n        sweep: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sweep;\r\n            },\r\n            set: function(value) {\r\n                this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        baseFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseFrequency = 50 * Math.pow(10, value * 2);\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        excursionOctaves: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._excursionOctaves;\r\n            },\r\n            set: function(value) {\r\n                this._excursionOctaves = value;\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        sensitivity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sensitivity;\r\n            },\r\n            set: function(value) {\r\n                this._sensitivity = Math.pow(10, value);\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._resonance;\r\n            },\r\n            set: function(value) {\r\n                this._resonance = value;\r\n                this.filterPeaking.Q = this._resonance;\r\n            }\r\n        },\r\n        init: {\r\n            value: function() {\r\n                this.output.gain.value = 1;\r\n                this.filterPeaking.type = \"peaking\";\r\n                this.filterBp.type = \"bandpass\";\r\n                this.filterPeaking.frequency.value = 100;\r\n                this.filterPeaking.gain.value = 20;\r\n                this.filterPeaking.Q.value = 5;\r\n                this.filterBp.frequency.value = 100;\r\n                this.filterBp.Q.value = 1;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.EnvelopeFollower = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\r\n\r\n        this.input.connect(this.output);\r\n\r\n        this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\r\n        this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\r\n        this._envelope = 0;\r\n        this.target = properties.target || {};\r\n        this.callback = properties.callback || function() {};\r\n\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"EnvelopeFollower\"\r\n        },\r\n        defaults: {\r\n            value: {\r\n                attackTime: {\r\n                    value: 0.003,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                releaseTime: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        buffersize: {\r\n            value: 256\r\n        },\r\n        envelope: {\r\n            value: 0\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        attackTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._attackTime;\r\n            },\r\n            set: function(value) {\r\n                this._attackTime = value;\r\n                this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        releaseTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._releaseTime;\r\n            },\r\n            set: function(value) {\r\n                this._releaseTime = value;\r\n                this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        callback: {\r\n            get: function() {\r\n                return this._callback;\r\n            },\r\n            set: function(value) {\r\n                if (typeof value === \"function\") {\r\n                    this._callback = value;\r\n                } else {\r\n                    console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\r\n                }\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                this.activated = doActivate;\r\n                if (doActivate) {\r\n                    this.jsNode.connect(userContext.destination);\r\n                    this.jsNode.onaudioprocess = this.returnCompute(this);\r\n                } else {\r\n                    this.jsNode.disconnect();\r\n                    this.jsNode.onaudioprocess = null;\r\n                }\r\n                if (this.activateCallback) {\r\n                    this.activateCallback(doActivate);\r\n                }\r\n            }\r\n        },\r\n        returnCompute: {\r\n            value: function(instance) {\r\n                return function(event) {\r\n                    instance.compute(event);\r\n                };\r\n            }\r\n        },\r\n        compute: {\r\n            value: function(event) {\r\n                var count = event.inputBuffer.getChannelData(0).length,\r\n                    channels = event.inputBuffer.numberOfChannels,\r\n                    current, chan, rms, i;\r\n                chan = rms = i = 0;\r\n                if (channels > 1) { //need to mixdown\r\n                    for (i = 0; i < count; ++i) {\r\n                        for (; chan < channels; ++chan) {\r\n                            current = event.inputBuffer.getChannelData(chan)[i];\r\n                            rms += (current * current) / channels;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i = 0; i < count; ++i) {\r\n                        current = event.inputBuffer.getChannelData(0)[i];\r\n                        rms += (current * current);\r\n                    }\r\n                }\r\n                rms = Math.sqrt(rms);\r\n\r\n                if (this._envelope < rms) {\r\n                    this._envelope *= this._attackC;\r\n                    this._envelope += (1 - this._attackC) * rms;\r\n                } else {\r\n                    this._envelope *= this._releaseC;\r\n                    this._envelope += (1 - this._releaseC) * rms;\r\n                }\r\n                this._callback(this._target, this._envelope);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.LFO = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        //Instantiate AudioNode\r\n        this.input = userContext.createGain();\r\n        this.output = userContext.createScriptProcessor(256, 1, 1);\r\n        this.activateNode = userContext.destination;\r\n\r\n        //Set Properties\r\n        this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\r\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\r\n        this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\r\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\r\n        this.target = properties.target || {};\r\n        this.output.onaudioprocess = this.callback(properties.callback || function() {});\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"LFO\"\r\n        },\r\n        bufferSize: {\r\n            value: 256\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        defaults: {\r\n            value: {\r\n                frequency: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                offset: {\r\n                    value: 0.85,\r\n                    min: 0,\r\n                    max: 22049,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                oscillation: {\r\n                    value: 0.3,\r\n                    min: -22050,\r\n                    max: 22050,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                phase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 2 * Math.PI,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        frequency: {\r\n            get: function() {\r\n                return this._frequency;\r\n            },\r\n            set: function(value) {\r\n                this._frequency = value;\r\n                this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\r\n            }\r\n        },\r\n        offset: {\r\n            get: function() {\r\n                return this._offset;\r\n            },\r\n            set: function(value) {\r\n                this._offset = value;\r\n            }\r\n        },\r\n        oscillation: {\r\n            get: function() {\r\n                return this._oscillation;\r\n            },\r\n            set: function(value) {\r\n                this._oscillation = value;\r\n            }\r\n        },\r\n        phase: {\r\n            get: function() {\r\n                return this._phase;\r\n            },\r\n            set: function(value) {\r\n                this._phase = value;\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                if (doActivate) {\r\n                    this.output.connect(userContext.destination);\r\n                    if (this.activateCallback) {\r\n                        this.activateCallback(doActivate);\r\n                    }\r\n                } else {\r\n                    this.output.disconnect();\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(callback) {\r\n                var that = this;\r\n                return function() {\r\n                    that._phase += that._phaseInc;\r\n                    if (that._phase > 2 * Math.PI) {\r\n                        that._phase = 0;\r\n                    }\r\n                    callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\r\n                };\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.toString = Tuna.prototype.toString = function() {\r\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\r\n    };\r\n})();\r\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/*This module wraps the audio listener to create a uniform interface between browsers, mainly Safari and other browsers:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/AudioListener\r\n*/\r\n\r\nclass AudioParam{\r\n\t// this is a wrapper for Safari if the browser does not support listener.positionX or the other properties\r\n\tconstructor(value, setFunc){\r\n\t\tthis._setFunc = setFunc\r\n\t\tthis.AudioParamautomationRate = \"a-rate\"\r\n\t\tthis.defaultValue = value\r\n\t\tthis.maxValue = 3.4028234663852886e+38\r\n\t\tthis.minValue = -3.4028234663852886e+38\r\n\t\tthis._value = this.defaultValue\r\n\t}\r\n\r\n\tget value(){\r\n\t\treturn this._value\r\n\t}\r\n\r\n\tset value(v){\r\n\t\tthis._setFunc(v)\r\n\t\tthis._value = v\r\n\t}\r\n}\r\n\r\nexport default class AudioListener{\r\n\tconstructor(context){\r\n\t\tthis._listener = context.listener\r\n\t\twindow.listener = this._listener\r\n\t\tthis.positionX = this._listener.positionX || new AudioParam(0, v=>this._listener.setPosition(v, this.positionY.value, this.positionZ.value))\r\n\t\tthis.positionY = this._listener.positionY || new AudioParam(0, v=>this._listener.setPosition(this.positionX.value, v, this.positionZ.value))\r\n\t\tthis.positionZ = this._listener.positionZ || new AudioParam(0, v=>this._listener.setPosition(this.positionX.value, this.positionY.value, v))\r\n\t\tthis.forwardX = this._listener.forwardX || new AudioParam(0, v=>this._listener.setOrientation(v, this.forwardY.value, this.forwardZ.value, this.upX.value, this.upY.value, this.upZ.value))\r\n\t\tthis.forwardY = this._listener.ForwardY || new AudioParam(0, v=>this._listener.setOrientation(this.forwardX.value, v, this.forwardZ.value, this.upX.value, this.upY.value, this.upZ.value))\r\n\t\tthis.forwardZ = this._listener.forwardZ || new AudioParam(-1, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, v, this.upX.value, this.upY.value, this.upZ.value))\r\n\t\tthis.upX = this._listener.upZ || new AudioParam(0, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, this.forwardZ.value, v, this.upY.value, this.upZ.value))\r\n\t\tthis.upY = this._listener.upY || new AudioParam(1, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, this.forwardZ.value, this.upX.value, v, this.upZ.value))\r\n\t\tthis.upZ = this._listener.upZ || new AudioParam(0, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, this.forwardZ.value, this.upX.value, this.upY.value, v))\r\n\t}\r\n\r\n\tsetPosition(x, y, z){\r\n\t\tthis.positionX.value = x\r\n\t\tthis.positionY.value = y\r\n\t\tthis.positionZ.value = z\r\n\t}\r\n\r\n\tgetPosition(){\r\n\t\treturn [this.positionX.value, this.positionY.value, this.positionZ.value]\r\n\t}\r\n\r\n\tsetOrientation(forwardX, forwardY, forwardZ, upX, upY, upZ){\r\n\t\tthis.forwardX.value = forwardX\r\n\t\tthis.forwardY.value = forwardY\r\n\t\tthis.forwardZ.value = forwardZ\r\n\t\tthis.upX.value = upX\r\n\t\tthis.upY.value = upY\r\n\t\tthis.upZ.value = upZ\r\n\t}\r\n\r\n\tgetOrientation(){\r\n\t\treturn [this.forwardX.value, this.forwardY.value, this.forwardZ.value, this.upX.value, this.upY.value, this.upZ.value]\r\n\t}\r\n}","/*below is the es6. It was transpiled to es5 from:\r\nhttps://babeljs.io/en/repl\r\nsearch for:\r\n// start of ES5\r\nto get there\r\n\r\nexport default class SoundIterator{\r\n    static defaultArgs = {\r\n        files: [], // either sound files or Wad audio objects\r\n        random: false, // either play a random order (true), or play in the order of the list (false)\r\n        randomPlaysBeforeRepeat: 0, // This value says the amount of plays that need to happen before a sound can be repeated. This only works if the length of the iterator is 3 or more, and this value is max 1 less than the length of the sound list.\r\n    }\r\n\r\n    constructor(args, Wad){\r\n        this.Wad = Wad //passed in from the Wad object that creates this iterator\r\n        args = Object.assign({}, SoundIterator.defaultArgs, args)\r\n        this.files = args.files\r\n        this.sounds = this.files.map(f=>f.play ? f : new Wad({source:f})) // checks if the item in the list is a wad or not.\r\n        this.randomSounds = this.sounds.slice() //creates a list of sounds that can be mutated if there are random sounds\r\n        this.random = args.random\r\n        this.randomPlaysBeforeRepeat = this.sounds.length > 3 && args.randomPlaysBeforeRepeat < sounds.length-1 ? args.randomPlaysBeforeRepeat : 0\r\n        this.index = 0 // keeps track of what item in the list is playing\r\n        this.waitingSounds = [] //has a list of the sounds that are waiting from randomPlaysBeforeRepeat\r\n    }\r\n\r\n    play(args={}){\r\n        if(!this.sounds.length) return 0\r\n        if(this.random){\r\n            const soundIndex = Math.floor(Math.random()*this.randomSounds.length)\r\n            const sound = this.randomSounds[soundIndex]\r\n            this.index = this.sounds.indexOf(sound)\r\n            this.waitingSounds = this.waitingSounds.filter(soundObj=>{\r\n                soundObj.plays -= 1\r\n                if(soundObj.plays < 1){\r\n                    this.randomSounds.push(soundObj.sound)\r\n                    return null\r\n                }\r\n                return true\r\n            })\r\n            if(this.randomPlaysBeforeRepeat){\r\n                this.randomSounds.splice(soundIndex, 1)\r\n                this.waitingSounds.push({plays: this.randomPlaysBeforeRepeat, sound: sound})\r\n            }\r\n            return sound.play(args)\r\n        } else {\r\n            const playingSound = this.sounds[this.index] ? this.sounds[this.index].play(args) : undefined\r\n            this.index += 1\r\n            if(this.index >= this.sounds.length){\r\n                this.index = 0\r\n            }\r\n            return playingSound    \r\n        }\r\n    }\r\n\r\n    add(sound){\r\n        if(!sound.play){\r\n            sound = new this.Wad({source: sound})\r\n        }\r\n        this.sounds.push(sound)\r\n        this.randomSounds.push(sound)\r\n        return this\r\n    }\r\n\r\n    remove(sound){\r\n        const soundIndex = this.sounds.indexOf(sound)\r\n        if(soundIndex === -1){\r\n            throw new Error(`That sound does not exist: ${sound}`)\r\n        }\r\n        this.sounds.splice(soundIndex, 1)\r\n        const randomSoundIndex = this.randomSounds.indexOf(sound)\r\n        if(randomSoundIndex === -1){\r\n            this.waitingSounds = this.waitingSounds.filter(obj => obj.sound === sound ? false : true)\r\n        } else {\r\n            this.randomSounds.splice(randomSoundIndex, 1)\r\n        }\r\n        return this\r\n    }\r\n}\r\n*/\r\n\r\n// start of ES5\r\n\"use strict\";\r\n\r\nfunction _instanceof(left, right) { if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nvar SoundIterator =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function SoundIterator(args, Wad) {\r\n    _classCallCheck(this, SoundIterator);\r\n\r\n    this.Wad = Wad; //passed in from the Wad object that creates this iterator\r\n\r\n    args = Object.assign({}, SoundIterator.defaultArgs, args);\r\n    this.files = args.files;\r\n    this.sounds = this.files.map(function (f) {\r\n      return f.play ? f : new Wad({\r\n        source: f\r\n      });\r\n    }); // checks if the item in the list is a wad or not.\r\n\r\n    this.randomSounds = this.sounds.slice(); //creates a list of sounds that can be mutated if there are random sounds\r\n\r\n    this.random = args.random;\r\n    this.randomPlaysBeforeRepeat = this.sounds.length > 3 && args.randomPlaysBeforeRepeat < sounds.length - 1 ? args.randomPlaysBeforeRepeat : 0;\r\n    this.index = 0; // keeps track of what item in the list is playing\r\n\r\n    this.waitingSounds = []; //has a list of the sounds that are waiting from randomPlaysBeforeRepeat\r\n  }\r\n\r\n  _createClass(SoundIterator, [{\r\n    key: \"play\",\r\n    value: function play() {\r\n      var _this = this;\r\n\r\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n      if (!this.sounds.length) return 0;\r\n\r\n      if (this.random) {\r\n        var soundIndex = Math.floor(Math.random() * this.randomSounds.length);\r\n        var sound = this.randomSounds[soundIndex];\r\n        this.index = this.sounds.indexOf(sound);\r\n        this.waitingSounds = this.waitingSounds.filter(function (soundObj) {\r\n          soundObj.plays -= 1;\r\n\r\n          if (soundObj.plays < 1) {\r\n            _this.randomSounds.push(soundObj.sound);\r\n\r\n            return null;\r\n          }\r\n\r\n          return true;\r\n        });\r\n\r\n        if (this.randomPlaysBeforeRepeat) {\r\n          this.randomSounds.splice(soundIndex, 1);\r\n          this.waitingSounds.push({\r\n            plays: this.randomPlaysBeforeRepeat,\r\n            sound: sound\r\n          });\r\n        }\r\n\r\n        return sound.play(args);\r\n      } else {\r\n        var playingSound = this.sounds[this.index] ? this.sounds[this.index].play(args) : undefined;\r\n        this.index += 1;\r\n\r\n        if (this.index >= this.sounds.length) {\r\n          this.index = 0;\r\n        }\r\n\r\n        return playingSound;\r\n      }\r\n    }\r\n  }, {\r\n    key: \"add\",\r\n    value: function add(sound) {\r\n      if (!sound.play) {\r\n        sound = new this.Wad({\r\n          source: sound\r\n        });\r\n      }\r\n\r\n      this.sounds.push(sound);\r\n      this.randomSounds.push(sound);\r\n      return this;\r\n    }\r\n  }, {\r\n    key: \"remove\",\r\n    value: function remove(sound) {\r\n      var soundIndex = this.sounds.indexOf(sound);\r\n\r\n      if (soundIndex === -1) {\r\n        throw new Error(\"That sound does not exist: \".concat(sound));\r\n      }\r\n\r\n      this.sounds.splice(soundIndex, 1);\r\n      var randomSoundIndex = this.randomSounds.indexOf(sound);\r\n\r\n      if (randomSoundIndex === -1) {\r\n        this.waitingSounds = this.waitingSounds.filter(function (obj) {\r\n          return obj.sound === sound ? false : true;\r\n        });\r\n      } else {\r\n        this.randomSounds.splice(randomSoundIndex, 1);\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }]);\r\n\r\n  return SoundIterator;\r\n}();\r\n\r\n_defineProperty(SoundIterator, \"defaultArgs\", {\r\n  files: [],\r\n  // either sound files or Wad audio objects\r\n  random: false,\r\n  // either play a random order (true), or play in the order of the list (false)\r\n  randomPlaysBeforeRepeat: 0 // This value says the amount of plays that need to happen before a sound can be repeated. This only works if the length of the iterator is 3 or more, and this value is max 1 less than the length of the sound list.\r\n\r\n});\r\nexport default SoundIterator;","import Tuna from 'tunajs';\r\nimport SoundIterator from './sound_iterator'\r\nimport AudioListener from './audio_listener'\r\n\r\n\r\n\r\nvar Wad = (function(){\r\n\r\n    var audioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\n    var logStuff = {\r\n        verbosity: 0,\r\n        suppressedLogs: 0\r\n    }\r\n\r\n    var logMessage = function(message, logLevel){\r\n        var logLevel = logLevel || 1\r\n        if ( logStuff.verbosity >= logLevel ) {\r\n            console.log(message)\r\n        } \r\n        else { logStuff.suppressedLogs++ }\r\n    }\r\n    \r\n    var aScene = document.querySelector('a-scene');\r\n    var context;\r\n    if ( aScene && aScene.audioListener && aScene.audioListener.context){\r\n        context = aScene.audioListener.context\r\n        logMessage(\"An A-Frame scene has been detected.\")\r\n    }\r\n    else {\r\n        context = new audioContext();\r\n    }\r\n    var unlock = function(){\r\n        logMessage('unlock', 2)\r\n        if ( context.state === 'suspended' ) {\r\n            logMessage('suspended', 2)\r\n            context.resume()\r\n        }\r\n        else if ( context.state === 'running' ) {\r\n            logMessage(\"The audio context is running.\", 2)\r\n            logMessage(context, 2)\r\n            window.removeEventListener('mousemove', unlock)\r\n            window.removeEventListener('touchstart', unlock)\r\n            window.removeEventListener('touchend', unlock)\r\n        }\r\n    }\r\n    window.addEventListener('mousemove', unlock)\r\n    window.addEventListener('touchstart', unlock)\r\n    window.addEventListener('touchend', unlock)\r\n    // create a wrapper for old versions of `getUserMedia`\r\n    var getUserMedia = (function(window) {\r\n        if (window.navigator.mediaDevices && window.navigator.mediaDevices.getUserMedia) {\r\n            // Browser supports promise based `getUserMedia`\r\n            return window.navigator.mediaDevices.getUserMedia.bind(window.navigator.mediaDevices);\r\n        }\r\n        var navigatorGetUserMedia = window.navigator.getUserMedia || window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;\r\n        if (navigatorGetUserMedia) {\r\n            // Browser supports old `getUserMedia` with callbacks.\r\n            return function(constraints) {\r\n                return new Promise(function(resolve, reject) {\r\n                    navigatorGetUserMedia.call(window.navigator, constraints, resolve, reject);\r\n                });\r\n            };\r\n        }\r\n    \r\n        return function() {\r\n            throw \"getUserMedia is unsupported\";\r\n        };\r\n    }(window));\r\n    \r\n    if (getUserMedia) { logMessage(\"Your browser supports getUserMedia.\"); }\r\n    else { logMessage(\"Your browser does not support getUserMedia.\"); }\r\n\r\n\r\n/** Pre-render a noise buffer instead of generating noise on the fly. **/\r\n    var noiseBuffer = (function(){\r\n        // the initial seed\r\n        Math.seed = 6;\r\n        Math.seededRandom = function(max, min){\r\n            max = max || 1;\r\n            min = min || 0;\r\n            Math.seed = ( Math.seed * 9301 + 49297 ) % 233280;\r\n            var rnd = Math.seed / 233280;\r\n\r\n            return min + rnd * (max - min);\r\n        }\r\n        var bufferSize = 2 * context.sampleRate;\r\n        var noiseBuffer = context.createBuffer(1, bufferSize, context.sampleRate);\r\n        var output = noiseBuffer.getChannelData(0);\r\n        for ( var i = 0; i < bufferSize; i++ ) {\r\n            output[i] = Math.seededRandom() * 2 - 1;\r\n        }\r\n        return noiseBuffer;\r\n    })()\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n/** a lil hack. just be glad it isn't on Object.prototype. **/\r\n    var isArray = function(object){\r\n        return Object.prototype.toString.call(object) === '[object Array]';\r\n    }\r\n\r\n/** Set up the default ADSR envelope. **/\r\n    var constructEnv = function(that, arg){\r\n        that.env = { //default envelope, if one is not specified on play\r\n            attack  : arg.env ? valueOrDefault(arg.env.attack,  0) : 0,    // time in seconds from onset to peak volume\r\n            decay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume\r\n            sustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1\r\n            hold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume\r\n            release : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume\r\n        };\r\n        that.defaultEnv = {\r\n            attack  : arg.env ? valueOrDefault(arg.env.attack,  0) : 0,    // time in seconds from onset to peak volume\r\n            decay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume\r\n            sustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1\r\n            hold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume\r\n            release : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume\r\n        };\r\n        that.userSetHold = !!(arg.env && arg.env.hold)\r\n    }\r\n/////////////////////////////////////////\r\n\r\n\r\n/** Set up the default filter and filter envelope. **/\r\n    var constructFilter = function(that, arg){\r\n\r\n        if ( !arg.filter ) { arg.filter = null; }\r\n\r\n        else if ( isArray(arg.filter) ) {\r\n            that.filter = arg.filter.map(function(filterArg){\r\n                return {\r\n                    type : filterArg.type || 'lowpass',\r\n                    frequency : filterArg.frequency || 600,\r\n                    q : filterArg.q || 1,\r\n                    env : filterArg.env || null,\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            that.filter  = [{\r\n                type : arg.filter.type || 'lowpass',\r\n                frequency : arg.filter.frequency || 600,\r\n                q : arg.filter.q || 1,\r\n                env : arg.filter.env ||null,\r\n            }];\r\n        }\r\n    }\r\n//////////////////////////////////////////////////////\r\n\r\n\r\n/** If the Wad uses an audio file as the source, request it from the server.\r\nDon't let the Wad play until all necessary files have been downloaded. **/\r\n    var requestAudioFile = function(that, callback){\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"GET\", that.source, true);\r\n        request.responseType = \"arraybuffer\";\r\n        that.playable--;\r\n        request.onload = function(){\r\n            context.decodeAudioData(request.response, function (decodedBuffer){\r\n                that.decodedBuffer = decodedBuffer;\r\n                if ( that.env.hold === 3.14159 ) { // audio buffers should not use the default hold\r\n                    that.defaultEnv.hold = that.decodedBuffer.duration * ( 1 / that.rate )\r\n                    that.env.hold = that.decodedBuffer.duration * ( 1 / that.rate )\r\n                }\r\n                that.duration = that.env.hold * 1000\r\n\r\n                if ( callback ) { callback(that); }\r\n                that.playable++;\r\n                if ( that.playOnLoad ) { that.play(that.playOnLoadArg); }\r\n            })\r\n        };\r\n        request.send();\r\n    };\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\n/** Set up the vibrato LFO **/\r\n    var constructVibrato = function(that, arg){\r\n        if ( arg.vibrato ) {\r\n            that.vibrato = {\r\n                shape     : valueOrDefault(arg.vibrato.shape, 'sine'),\r\n                speed     : valueOrDefault(arg.vibrato.speed, 1),\r\n                magnitude : valueOrDefault(arg.vibrato.magnitude, 5),\r\n                attack    : valueOrDefault(arg.vibrato.attack, 0)\r\n            };\r\n        }\r\n        else { that.vibrato = null; }\r\n    };\r\n//////////////////////////////\r\n\r\n\r\n/** Set up the tremolo LFO **/\r\n    var constructTremolo = function(that, arg){\r\n        if ( arg.tremolo ) {\r\n            that.tremolo = {\r\n                shape     : valueOrDefault(arg.tremolo.shape, 'sine'),\r\n                speed     : valueOrDefault(arg.tremolo.speed, 1),\r\n                magnitude : valueOrDefault(arg.tremolo.magnitude, 5),\r\n                attack    : valueOrDefault(arg.tremolo.attack, 1)\r\n            };\r\n        }\r\n        else { that.tremolo = null; }\r\n    };\r\n//////////////////////////////\r\n\r\n/** Grab the reverb impulse response file from a server.\r\nYou may want to change Wad.defaultImpulse to serve files from your own server.\r\nCheck out http://www.voxengo.com/impulses/ for free impulse responses. **/\r\n    var constructReverb = function(that, arg){\r\n        if ( arg.reverb ) {\r\n            that.reverb = { wet : valueOrDefault(arg.reverb.wet, 1) };\r\n            var impulseURL = arg.reverb.impulse || Wad.defaultImpulse;\r\n            var request = new XMLHttpRequest();\r\n            request.open(\"GET\", impulseURL, true);\r\n            request.responseType = \"arraybuffer\";\r\n            that.playable--;\r\n            request.onload = function(){\r\n                context.decodeAudioData(request.response, function (decodedBuffer){\r\n\r\n                    that.reverb.buffer = decodedBuffer;\r\n                    that.playable++;\r\n                    if ( that.playOnLoad ) { that.play(that.playOnLoadArg); }\r\n                    if ( that instanceof Wad.Poly ) { that.setUp(arg); }\r\n                    if ( that.source === 'mic' && that.reverb && that.reverb.buffer && that.reverb.node && !that.reverb.node.buffer ) { // I think this is only relevant when calling play() with args on a mic\r\n                        that.reverb.node.convolver.buffer = that.reverb.buffer;\r\n                    }\r\n\r\n                })\r\n            };\r\n            request.send();\r\n        }\r\n        else {\r\n            that.reverb = null;\r\n        }\r\n    };\r\n\r\n    var constructPanning = function(that, arg){\r\n        if ( 'panning' in arg ) {\r\n            that.panning = { location : arg.panning };\r\n            if ( typeof(arg.panning) === \"number\" ) {\r\n                that.panning.type = 'stereo';\r\n            }\r\n\r\n            else {\r\n                that.panning.type = '3d'\r\n                that.panning.panningModel   = arg.panningModel || 'equalpower';\r\n                that.panning.distanceModel  = arg.distanceModel \r\n                that.panning.maxDistance    = arg.maxDistance \r\n                that.panning.rolloffFactor  = arg.rolloffFactor\r\n                that.panning.refDistance    = arg.refDistance\r\n                that.panning.coneInnerAngle = arg.coneInnerAngle\r\n                that.panning.coneOuterAngle = arg.coneOuterAngle\r\n                that.panning.coneOuterGain  = arg.coneOuterGain\r\n            }\r\n        }\r\n\r\n        else {\r\n            that.panning = {\r\n                location : 0,\r\n                type     : 'stereo',\r\n            };\r\n        }\r\n        if ( that.panning.type === 'stereo' && !context.createStereoPanner ) {\r\n            logMessage(\"Your browser does not support stereo panning. Falling back to 3D panning.\")\r\n            that.panning = {\r\n                location     : [0,0,0],\r\n                type         : '3d',\r\n                panningModel : 'equalpower',\r\n            }\r\n        }\r\n    };\r\n//////////////////////////////////////////////////////////////////////////////\r\n    var constructDelay = function(that, arg){\r\n        if ( arg.delay ) {\r\n            that.delay = {\r\n                delayTime    : valueOrDefault(arg.delay.delayTime, .5),\r\n                maxDelayTime : valueOrDefault(arg.delay.maxDelayTime, 2),\r\n                feedback     : valueOrDefault(arg.delay.feedback, .25),\r\n                wet          : valueOrDefault(arg.delay.wet, .25)\r\n            };\r\n        }\r\n        else { that.delay = null; }\r\n    };\r\n/** Special initialization and configuration for microphone Wads **/\r\n    var getConsent = function(that, arg) {\r\n        that.nodes             = [];\r\n        that.mediaStreamSource = null;\r\n        that.gain              = null;\r\n        return getUserMedia({audio: true, video: false}).then(function(stream) {\r\n            that.mediaStreamSource = context.createMediaStreamSource(stream);\r\n            Wad.micConsent = true\r\n            setUpMic(that, arg);\r\n            return that;\r\n        }).catch(function(error) { logMessage('Error setting up microphone input: ', error); }); // This is the error callback.\r\n    };\r\n////////////////////////////////////////////////////////////////////\r\n\r\n    var setUpMic = function(that, arg){\r\n        that.nodes           = [];\r\n        that.gain            = context.createGain();\r\n        that.gain.gain.value = valueOrDefault(arg.volume,that.volume);\r\n        that.nodes.push(that.mediaStreamSource);\r\n        that.nodes.push(that.gain);\r\n  \r\n\r\n        if ( that.filter || arg.filter ) { createFilters(that, arg); }\r\n\r\n        if ( that.reverb || arg.reverb ) { setUpReverbOnPlay(that, arg); }\r\n\r\n        constructPanning(that, arg);\r\n        setUpPanningOnPlay(that, arg);\r\n\r\n        if ( that.delay || arg.delay ) {\r\n            setUpDelayOnPlay(that, arg);\r\n        }\r\n        setUpTunaOnPlay(that, arg)\r\n        that.setUpExternalFxOnPlay(arg, context);\r\n    }\r\n\r\n    var allWads = []\r\n\r\n    var Wad = function(arg){\r\n/** Set basic Wad properties **/\r\n        this.source        = arg.source;\r\n        this.destination   = arg.destination || context.destination; // the last node the sound is routed to\r\n        this.volume        = valueOrDefault(arg.volume, 1); // peak volume. min:0, max:1 (actually max is infinite, but ...just keep it at or below 1)\r\n        this.defaultVolume = this.volume;\r\n        this.playable      = 1; // if this is less than 1, this Wad is still waiting for a file to download before it can play\r\n        this.pitch         = Wad.pitches[arg.pitch] || arg.pitch || 440;\r\n        this.gain          = [];\r\n        this.detune        = arg.detune || 0; // In Cents.\r\n        this.globalReverb  = arg.globalReverb || false;\r\n        this.offset        = arg.offset || 0;\r\n        this.loop          = arg.loop   || false;\r\n        this.tuna          = arg.tuna   || null;\r\n        this.rate          = arg.rate   || 1;\r\n        this.sprite        = arg.sprite || null;\r\n        constructEnv(this, arg);\r\n        constructFilter(this, arg);\r\n        constructVibrato(this, arg);\r\n        constructTremolo(this, arg);\r\n        constructReverb(this, arg);\r\n        this.constructExternalFx(arg, context);\r\n        constructPanning(this, arg);\r\n        constructDelay(this, arg);\r\n        this.duration = (this.env.attack + this.env.decay + this.env.hold + this.env.release) * (1/(this.rate)) * 1000\r\n////////////////////////////////\r\n\r\n\r\n/** If the Wad's source is noise, set the Wad's buffer to the noise buffer we created earlier. **/\r\n        if ( this.source === 'noise' ) {\r\n            this.decodedBuffer = noiseBuffer;\r\n        }\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/** If the Wad's source is the microphone, the rest of the setup happens here. **/\r\n        else if ( this.source === 'mic' ) {\r\n            getConsent(this, arg);\r\n        }\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/** If the source is not a pre-defined value, assume it is a URL for an audio file, and grab it now. **/\r\n        else if ( !( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) ) {\r\n            requestAudioFile(this, arg.callback);\r\n\r\n            if ( this.sprite ) {\r\n                var thatWad = this;\r\n                for ( var sprite in this.sprite ) {\r\n                    this[sprite] = {\r\n                        sprite: this.sprite[sprite],\r\n                        play: function(arg){\r\n                            arg = arg || {}\r\n                            arg.env = arg.env || {}\r\n                            arg.env.hold = this.sprite[1] - this.sprite[0]\r\n                            arg.offset = this.sprite[0]\r\n\r\n                            return thatWad.play(arg)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        else { arg.callback && arg.callback(this) }\r\n        allWads.push(this)\r\n    };\r\n    Wad.allWads = allWads\r\n    Wad.micConsent = false\r\n    Wad.audioContext = context\r\n    Wad.listener = new AudioListener(context)\r\n    if ( typeof Tuna != undefined ) {\r\n        Wad.tuna = new Tuna(Wad.audioContext)\r\n    }\r\n\r\n\r\n/** When a note is played, these two functions will schedule changes in volume and filter frequency,\r\nas specified by the volume envelope and filter envelope **/\r\n    var filterEnv = function(wad, arg){\r\n        wad.filter.forEach(function (filter, index){\r\n            filter.node.frequency.linearRampToValueAtTime(filter.frequency, arg.exactTime);\r\n            filter.node.frequency.linearRampToValueAtTime(filter.env.frequency, arg.exactTime + filter.env.attack);\r\n        });\r\n    };\r\n\r\n    var playEnv = function(wad, arg){\r\n        var loop = arg.loop || arg.loop\r\n        if ( wad.env.hold === -1 || (loop && !wad.userSetHold && !(arg.env && arg.env.hold) ) ){\r\n            var hold = 999\r\n        }\r\n        else { var hold = wad.env.hold }\r\n        wad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime);\r\n        wad.gain[0].gain.linearRampToValueAtTime(wad.volume, arg.exactTime + wad.env.attack + 0.00001);\r\n        wad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + 0.00002);\r\n        wad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + hold + 0.00003);\r\n        wad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime + wad.env.attack + wad.env.decay + hold + wad.env.release + 0.00004);\r\n        // offset is only used by BufferSourceNodes. OscillatorNodes should safely ignore the offset.\r\n        wad.soundSource.start(arg.exactTime, arg.offset);\r\n        if ( !wad.soundSource.playbackRate ) { // audio clips naturally stop themselves at the end of the buffer's duration\r\n            wad.soundSource.stop(arg.exactTime + wad.env.attack + wad.env.decay + hold + wad.env.release + 0.00005);\r\n        }\r\n    };\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/** When all the nodes are set up for this Wad, this function plugs them into each other,\r\nwith special handling for nodes with custom interfaces (e.g. reverb, delay). **/\r\n    var plugEmIn = function(that, arg){\r\n        var destination = ( arg && arg.destination ) || that.destination;\r\n        for ( var i = 1; i < that.nodes.length; i++ ) {\r\n            if ( that.nodes[i-1].interface === 'custom' ) {\r\n                var from = that.nodes[i-1].output;\r\n            }\r\n            else { // assume native interface\r\n                var from = that.nodes[i-1];\r\n            }\r\n            if ( that.nodes[i].interface === 'custom' ) {\r\n                var to = that.nodes[i].input\r\n            }\r\n            else { // assume native interface\r\n                var to = that.nodes[i]\r\n            }\r\n            from.connect(to);\r\n        }\r\n        if ( that.nodes[that.nodes.length-1].interface === 'custom') {\r\n            var lastStop = that.nodes[that.nodes.length-1].output;\r\n        }\r\n        else { // assume native interface\r\n            var lastStop = that.nodes[that.nodes.length-1];\r\n        }\r\n        lastStop.connect(destination);\r\n\r\n        /** Global reverb is super deprecated, and should be removed at some point. **/\r\n        if ( Wad.reverb && that.globalReverb ) {\r\n            that.nodes[that.nodes.length - 1].connect(Wad.reverb.node);\r\n            Wad.reverb.node.connect(Wad.reverb.gain);\r\n            Wad.reverb.gain.connect(destination);\r\n        }\r\n        /**************************************************************************/\r\n    };\r\n/////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/** Initialize and configure an oscillator node **/\r\n    var setUpOscillator = function(that, arg){\r\n        arg = arg || {};\r\n        that.soundSource = context.createOscillator();\r\n        that.soundSource.type = that.source;\r\n        if ( arg.pitch ) {\r\n            if ( arg.pitch in Wad.pitches ) {\r\n                that.soundSource.frequency.value = Wad.pitches[arg.pitch];\r\n            }\r\n            else {\r\n                that.soundSource.frequency.value = arg.pitch;\r\n            }\r\n        }\r\n        else {\r\n            that.soundSource.frequency.value = that.pitch;\r\n        }\r\n    };\r\n///////////////////////////////////////////////////\r\n\r\n/** Set the ADSR volume envelope according to play() arguments, or revert to defaults **/\r\n    var setUpEnvOnPlay = function(that, arg){\r\n        if ( arg && arg.env ) {\r\n            that.env.attack  = valueOrDefault(arg.env.attack, that.defaultEnv.attack);\r\n            that.env.decay   = valueOrDefault(arg.env.decay, that.defaultEnv.decay);\r\n            that.env.sustain = valueOrDefault(arg.env.sustain, that.defaultEnv.sustain);\r\n            that.env.hold    = valueOrDefault(arg.env.hold, that.defaultEnv.hold);\r\n            that.env.release = valueOrDefault(arg.env.release, that.defaultEnv.release);\r\n        }\r\n        else {\r\n            that.env = {\r\n                attack  : that.defaultEnv.attack,\r\n                decay   : that.defaultEnv.decay,\r\n                sustain : that.defaultEnv.sustain,\r\n                hold    : that.defaultEnv.hold,\r\n                release : that.defaultEnv.release\r\n            };\r\n        }\r\n\r\n    };\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/** Set the filter and filter envelope according to play() arguments, or revert to defaults **/\r\n\r\n    var createFilters = function(that, arg){\r\n        if ( arg.filter && !isArray(arg.filter) ) {\r\n            arg.filter = [arg.filter];\r\n        }\r\n        that.filter.forEach(function (filter, i) {\r\n            filter.node                 = context.createBiquadFilter();\r\n            filter.node.type            = filter.type;\r\n            filter.node.frequency.value = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].frequency || filter.frequency ) : filter.frequency;\r\n            filter.node.Q.value         = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].q         || filter.q )         : filter.q;\r\n            if ( ( arg.filter && arg.filter[i].env || that.filter[i].env ) && !( that.source === \"mic\" ) ) {\r\n                filter.env = {\r\n                    attack    : ( arg.filter && arg.filter[i].env && arg.filter[i].env.attack )    || that.filter[i].env.attack,\r\n                    frequency : ( arg.filter && arg.filter[i].env && arg.filter[i].env.frequency ) || that.filter[i].env.frequency\r\n                };\r\n            }\r\n\r\n            that.nodes.push(filter.node);\r\n        })\r\n    };\r\n\r\n    var setUpFilterOnPlay = function(that, arg){\r\n        if ( arg && arg.filter && that.filter ) {\r\n            if ( !isArray(arg.filter) ) arg.filter = [arg.filter]\r\n            createFilters(that, arg)\r\n        }\r\n        else if ( that.filter ) {\r\n            createFilters(that, that);\r\n        }\r\n    };\r\n///////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/** Initialize and configure a convolver node for playback **/\r\n    var setUpReverbOnPlay = function(that, arg){\r\n        var reverbNode = {\r\n            interface : 'custom',\r\n            input : context.createGain(),\r\n            convolver : context.createConvolver(),\r\n            wet : context.createGain(),\r\n            output : context.createGain()\r\n        }\r\n        reverbNode.convolver.buffer = that.reverb.buffer;\r\n        reverbNode.wet.gain.value   = that.reverb.wet;\r\n\r\n        reverbNode.input.connect(reverbNode.convolver);\r\n        reverbNode.input.connect(reverbNode.output);\r\n        reverbNode.convolver.connect(reverbNode.wet);\r\n        reverbNode.wet.connect(reverbNode.output);\r\n\r\n        that.reverb.node = reverbNode;\r\n        that.nodes.push(that.reverb.node);\r\n    };\r\n//////////////////////////////////////////////////////////////\r\n\r\n\r\n/** Initialize and configure a panner node for playback **/\r\n    var setUpPanningOnPlay = function(that, arg){\r\n        var panning = arg && arg.panning; // can be zero provided as argument\r\n        if (typeof panning === 'undefined') { panning = that.panning.location; }\r\n\r\n        if (typeof panning  === 'number' && context.createStereoPanner ) {\r\n            that.panning.node = context.createStereoPanner();\r\n            that.panning.node.pan.value = panning;\r\n            that.panning.type = 'stereo';\r\n        }\r\n        else {\r\n            that.panning.node = context.createPanner();\r\n            if ( typeof panning === 'number' ) {\r\n                that.panning.node.setPosition(panning, 0, 0);\r\n            }\r\n            else { // assume 3d panning, specified in a 3-element array. \r\n                that.panning.node.setPosition(panning[0], panning[1], panning[2]);\r\n            }\r\n            that.panning.node.panningModel = arg.panningModel || that.panningModel || 'equalpower';\r\n            that.panning.type = '3d';\r\n\r\n            that.panning.node.distanceModel  = arg.distanceModel  || that.distanceModel  || that.panning.node.distanceModel\r\n            that.panning.node.maxDistance    = arg.maxDistance    || that.maxDistance    || that.panning.node.maxDistance\r\n            that.panning.node.rolloffFactor  = arg.rolloffFactor  || that.rolloffFactor  || that.panning.node.rolloffFactor\r\n            that.panning.node.refDistance    = arg.refDistance    || that.refDistance    || that.panning.node.refDistance\r\n            that.panning.node.coneInnerAngle = arg.coneInnerAngle || that.coneInnerAngle || that.panning.node.coneInnerAngle\r\n            that.panning.node.coneOuterAngle = arg.coneOuterAngle || that.coneOuterAngle || that.panning.node.coneOuterAngle\r\n            that.panning.node.coneOuterGain  = arg.coneOuterGain  || that.coneOuterGain  || that.panning.node.coneOuterGain\r\n        }\r\n\r\n        that.nodes.push(that.panning.node);\r\n\r\n    };\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n/** Initialize and configure a vibrato LFO Wad for playback **/\r\n    var setUpVibratoOnPlay = function(that, arg){\r\n        that.vibrato.wad = new Wad({\r\n            source : that.vibrato.shape,\r\n            pitch  : that.vibrato.speed,\r\n            volume : that.vibrato.magnitude,\r\n            env    : {\r\n                attack : that.vibrato.attack\r\n            },\r\n            destination : that.soundSource.frequency\r\n        });\r\n        that.vibrato.wad.play();\r\n    };\r\n///////////////////////////////////////////////////////////////\r\n\r\n\r\n/** Initialize and configure a tremolo LFO Wad for playback **/\r\n    var setUpTremoloOnPlay = function(that, arg){\r\n        that.tremolo.wad = new Wad({\r\n            source : that.tremolo.shape,\r\n            pitch  : that.tremolo.speed,\r\n            volume : that.tremolo.magnitude,\r\n            env    : {\r\n                attack : that.tremolo.attack,\r\n                hold   : 10\r\n            },\r\n            destination : that.gain[0].gain\r\n        });\r\n        that.tremolo.wad.play();\r\n    };\r\n///////////////////////////////////////////////////////////////\r\n\r\n    var setUpDelayOnPlay = function(that, arg){\r\n        if ( that.delay ) {\r\n            if ( !arg.delay ) { arg.delay = {}; }\r\n            //create the nodes we’ll use\r\n            var delayNode = { // the custom delay node\r\n                interface    : 'custom',\r\n                input        : context.createGain(),\r\n                output       : context.createGain(),\r\n                delayNode    : context.createDelay(that.delay.maxDelayTime), // the native delay node inside the custom delay node.\r\n                feedbackNode : context.createGain(),\r\n                wetNode      : context.createGain(),\r\n            }\r\n\r\n            //set some decent values\r\n            delayNode.delayNode.delayTime.value = valueOrDefault(arg.delay.delayTime, that.delay.delayTime);\r\n            delayNode.feedbackNode.gain.value   = valueOrDefault(arg.delay.feedback, that.delay.feedback);\r\n            delayNode.wetNode.gain.value        = valueOrDefault(arg.delay.wet, that.delay.wet);\r\n\r\n\r\n            //set up the routing\r\n            delayNode.input.connect(delayNode.delayNode);\r\n            delayNode.input.connect(delayNode.output);\r\n            delayNode.delayNode.connect(delayNode.feedbackNode);\r\n            delayNode.delayNode.connect(delayNode.wetNode);\r\n            delayNode.feedbackNode.connect(delayNode.delayNode);\r\n            delayNode.wetNode.connect(delayNode.output);\r\n            that.delay.delayNode = delayNode;\r\n\r\n            that.nodes.push(delayNode)\r\n        }\r\n    };\r\n\r\n/** **/\r\n    var constructCompressor = function(that, arg){\r\n        that.compressor = context.createDynamicsCompressor();\r\n        that.compressor.attack.value    = valueOrDefault(arg.compressor.attack, that.compressor.attack.value);\r\n        that.compressor.knee.value      = valueOrDefault(arg.compressor.knee, that.compressor.knee.value);\r\n        that.compressor.ratio.value     = valueOrDefault(arg.compressor.ratio, that.compressor.ratio.value);\r\n        that.compressor.release.value   = valueOrDefault(arg.compressor.release, that.compressor.release.value);\r\n        that.compressor.threshold.value = valueOrDefault(arg.compressor.threshold, that.compressor.threshold.value);\r\n        that.nodes.push(that.compressor);\r\n    };\r\n    var setUpTunaOnPlay = function(that, arg){\r\n        if ( !( that.tuna || arg.tuna ) ) { return }\r\n        var tunaConfig = {}\r\n        if ( that.tuna ) {\r\n            for ( var key in that.tuna ) {\r\n                tunaConfig[key] = that.tuna[key]\r\n            }\r\n        }\r\n\r\n        // overwrite settings from `this` with settings from arg\r\n        if ( arg.tuna ) {\r\n            for ( var key in arg.tuna ) {\r\n                tunaConfig[key] = arg.tuna[key]\r\n            }\r\n        }\r\n        for ( var key in tunaConfig) {\r\n            var tunaEffect = new Wad.tuna[key](tunaConfig[key])\r\n            that.nodes.push(tunaEffect)\r\n        }\r\n    }\r\n///\r\n\r\n/** Method to allow users to setup external fx in the constructor **/\r\n    Wad.prototype.constructExternalFx = function(arg, context){\r\n        //override me in your own code\r\n    };\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/** To be overrided by the user **/\r\n    Wad.prototype.setUpExternalFxOnPlay = function(arg, context){\r\n        //user does what is necessary here, and then maybe does something like:\r\n        // this.nodes.push(externalFX)\r\n    };\r\n///////////////////////////////////////////////////////////////\r\n\r\n\r\n/** the play() method will create the various nodes that are required for this Wad to play,\r\nset properties on those nodes according to the constructor arguments and play() arguments,\r\nplug the nodes into each other with plugEmIn(),\r\nthen finally play the sound by calling playEnv() **/\r\n    Wad.prototype.play = function(arg){\r\n        arg = arg || { arg : null };\r\n        if ( this.playable < 1 ) {\r\n            this.playOnLoad    = true;\r\n            this.playOnLoadArg = arg;\r\n        }\r\n\r\n        else if ( this.source === 'mic' ) {\r\n            if ( Wad.micConsent ) {\r\n                if ( arg.arg === null ) {\r\n                    plugEmIn(this, arg);\r\n                }\r\n                else {\r\n                    constructFilter(this, arg);\r\n                    constructVibrato(this, arg);\r\n                    constructTremolo(this, arg);\r\n                    constructReverb(this, arg);\r\n                    this.constructExternalFx(arg, context);\r\n                    constructPanning(this, arg);\r\n                    constructDelay(this, arg);\r\n                    setUpMic(this, arg);\r\n                    plugEmIn(this, arg);\r\n                }\r\n            }\r\n            else { \r\n                logMessage('You have not given your browser permission to use your microphone.')\r\n                getConsent(this, arg).then(function (that) {\r\n                    that.play(arg);\r\n                });\r\n            }\r\n        }\r\n\r\n        else { // setup oscillators or audio clips\r\n            this.nodes = [];\r\n            if ( !arg.wait ) { arg.wait = 0; }\r\n            if ( arg.volume ) { this.volume = arg.volume; }\r\n            else { this.volume = this.defaultVolume; }\r\n            arg.offset = arg.offset || this.offset || 0;\r\n\r\n\r\n            if ( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) {\r\n                setUpOscillator(this, arg);\r\n            }\r\n\r\n            else {\r\n                this.soundSource = context.createBufferSource();\r\n                this.soundSource.buffer = this.decodedBuffer;\r\n                if ( this.source === 'noise' || this.loop || arg.loop ) {\r\n                    this.soundSource.loop = true;\r\n                }\r\n                \r\n            }\r\n\r\n\r\n            if ( this.soundSource.detune ) {\r\n                this.soundSource.detune.value = arg.detune || this.detune;\r\n            }\r\n\r\n            if ( arg.wait === undefined ) {\r\n                arg.wait = 0;\r\n            }\r\n            if (arg.exactTime === undefined) {\r\n                arg.exactTime = context.currentTime + arg.wait;\r\n            }\r\n            this.lastPlayedTime = arg.exactTime - arg.offset\r\n\r\n            this.nodes.push(this.soundSource);\r\n\r\n\r\n    /**  sets the volume envelope based on the play() arguments if present,\r\n    or defaults to the constructor arguments if the volume envelope is not set on play() **/\r\n            setUpEnvOnPlay(this, arg);\r\n    ////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n            if ( this.soundSource.playbackRate ) {\r\n                this.soundSource.playbackRate.value = arg.rate || this.rate;\r\n                this.env.hold = this.env.hold * (1/this.soundSource.playbackRate.value)\r\n            }\r\n\r\n    /**  sets up the filter and filter envelope based on the play() argument if present,\r\n    or defaults to the constructor argument if the filter and filter envelope are not set on play() **/\r\n            setUpFilterOnPlay(this, arg);\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\r\n            setUpTunaOnPlay(this, arg);\r\n\r\n            this.setUpExternalFxOnPlay(arg, context);\r\n\r\n\r\n            this.gain.unshift(context.createGain()); // sets up the gain node\r\n            this.gain[0].label = arg.label;\r\n            this.nodes.push(this.gain[0]);\r\n\r\n            if ( this.gain.length > 15 ) {\r\n                this.gain.length = 15\r\n            }\r\n\r\n            // sets up reverb\r\n            if ( this.reverb ) { setUpReverbOnPlay(this, arg); }\r\n\r\n    /**  sets panning based on the play() argument if present, or defaults to the constructor argument if panning is not set on play **/\r\n            setUpPanningOnPlay(this, arg);\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n            setUpDelayOnPlay(this, arg);\r\n\r\n            plugEmIn(this, arg);\r\n\r\n            if ( this.filter && this.filter[0].env ) { filterEnv(this, arg); }\r\n            playEnv(this, arg);\r\n\r\n            //sets up vibrato LFO\r\n            if ( this.vibrato ) { setUpVibratoOnPlay(this, arg); }\r\n\r\n            //sets up tremolo LFO\r\n            if ( this.tremolo ) { setUpTremoloOnPlay(this, arg); }\r\n\r\n            var thatWad = this\r\n\r\n            this.soundSource.onended = function(event){\r\n                thatWad.playPromiseResolve(thatWad)\r\n            }\r\n    \r\n            if ( !arg.unpause ) {\r\n                this.playPromise = new Promise(function(resolve, reject){\r\n                    thatWad.playPromiseResolve = resolve\r\n                })\r\n                return this.playPromise\r\n            }\r\n        }\r\n\r\n        if ( arg.callback ) { arg.callback(this); }\r\n\r\n    };\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    /** Change the volume of a Wad at any time, including during playback **/\r\n    Wad.prototype.setVolume = function(volume){\r\n        this.defaultVolume = volume;\r\n        if ( this.gain.length > 0 ) { this.gain[0].gain.value = volume; }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n    Change the playback rate of a Wad during playback.\r\n    inputSpeed is a value of 0 < speed, and is the rate of playback of the audio.\r\n    E.g. if input speed = 2.0, the playback will be twice as fast\r\n    **/\r\n    Wad.prototype.setRate = function(inputSpeed) {\r\n\r\n        //Check/Save the input\r\n        var speed;\r\n        if(inputSpeed && inputSpeed > 0) speed = inputSpeed;\r\n        else speed = 0;\r\n\r\n        //Check if we have a soundsource (Though we always should)\r\n        if(this.soundSource) {\r\n\r\n            //Set the value\r\n            this.soundSource.playbackRate.value = speed;\r\n        }\r\n        else {\r\n\r\n            //Inform that there is no sound source on the current wad\r\n            logMessage(\"Sorry, but the wad does not contain a soundSource!\");\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    Wad.prototype.setPitch = function(pitch){\r\n        if ( pitch in Wad.pitches ) {\r\n            if ( this.soundSource ) {\r\n                this.soundSource.frequency.value = Wad.pitches[pitch];\r\n            }\r\n            this.pitch = Wad.pitches[pitch]\r\n        }\r\n        else {\r\n            if ( this.soundSource ) {\r\n                this.soundSource.frequency.value = pitch;\r\n            }\r\n            this.pitch = pitch\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Wad.prototype.setDetune = function(detune, timeConstant){\r\n        timeConstant = timeConstant || .01\r\n        this.soundSource.detune.setTargetAtTime(detune, context.currentTime, timeConstant)\r\n        return this;\r\n    };\r\n\r\n    /** Change the panning of a Wad at any time, including during playback **/\r\n    Wad.prototype.setPanning = function(panning, timeConstant){\r\n        timeConstant = timeConstant || .01\r\n        if ( typeof panning === 'number' && !context.createStereoPanner ) {\r\n            panning = [panning, 0, 0]\r\n        }\r\n\r\n        this.panning.location = panning;\r\n        if ( isArray(panning) && this.panning.type === '3d' && this.panning.node ) {\r\n            this.panning.node.setPosition(panning[0], panning[1], panning[2]);\r\n\r\n        }\r\n        else if ( typeof panning === 'number' && this.panning.type === 'stereo' && this.panning.node) {\r\n            this.panning.node.pan.setTargetAtTime(panning, context.currentTime, timeConstant)\r\n        }\r\n\r\n        if ( isArray(panning) ) { this.panning.type = '3d' }\r\n        else if ( typeof panning === 'number' ) { this.panning.type = 'stereo' }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n    Change the Reverb of a Wad at any time, including during playback.\r\n    inputWet is a value of 0 < wetness/gain < 1\r\n    **/\r\n    Wad.prototype.setReverb = function(inputWet) {\r\n\r\n        //Check/Save the input\r\n\r\n        var wet;\r\n        if(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;\r\n        else if(inputWet >= 1) wet = 1;\r\n        else wet = 0;\r\n\r\n        //Check if we have delay\r\n        if(this.reverb) {\r\n\r\n            //Set the value\r\n            this.reverb.wet = wet;\r\n\r\n            //Set the node's value, if it exists\r\n            if(this.reverb.node) {\r\n\r\n                this.reverb.node.wet.gain.value = wet;\r\n            }\r\n        }\r\n        else {\r\n\r\n            //Inform that there is no reverb on the current wad\r\n            logMessage(\"Sorry, but the wad does not contain Reverb!\");\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n\r\n    /**\r\n    Change the Delay of a Wad at any time, including during playback.\r\n    inputTime is a value of time > 0, and is the time in seconds between each delayed playback.\r\n    inputWet is a value of gain 0 < inputWet < 1, and is Relative volume change between the original sound and the first delayed playback.\r\n    inputFeedback is a value of gain 0 < inputFeedback < 1, and is Relative volume change between each delayed playback and the next.\r\n    **/\r\n    Wad.prototype.setDelay = function(inputTime, inputWet, inputFeedback){\r\n\r\n        //Check/Save the input\r\n        var time;\r\n        if(inputTime && inputTime > 0) time = inputTime;\r\n        else time = 0;\r\n\r\n        var wet;\r\n        if(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;\r\n        else if(inputWet >= 1) wet = 1;\r\n        else wet = 0;\r\n\r\n        var feedback;\r\n        if(inputFeedback && inputFeedback > 0 && inputFeedback < 1) feedback = inputFeedback;\r\n        else if(inputFeedback >= 1) feedback = 1;\r\n        else feedback = 0;\r\n\r\n        //Check if we have delay\r\n        if(this.delay) {\r\n\r\n            //Set the value\r\n            this.delay.delayTime = time;\r\n            this.delay.wet = wet;\r\n            this.delay.feedback = feedback;\r\n\r\n            //Set the node's value, if it exists\r\n            if(this.delay.delayNode) {\r\n\r\n                this.delay.delayNode.delayNode.delayTime.value = time;\r\n                this.delay.delayNode.wetNode.gain.value = wet;\r\n                this.delay.delayNode.feedbackNode.gain.value = feedback;\r\n            }\r\n        }\r\n        else {\r\n\r\n            //Inform that there is no delay on the current wad\r\n            logMessage(\"Sorry, but the wad does not contain delay!\", 2);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\n    Wad.prototype.pause = function(label){\r\n        this.pauseTime = context.currentTime\r\n        this.soundSource.onended = null\r\n        this.stop(label)\r\n\r\n    }\r\n    Wad.prototype.unpause = function(arg){\r\n        arg = arg || {}\r\n        arg.unpause = true\r\n        if ( this.pauseTime && (this.lastPlayedTime != null) ) {\r\n            arg.offset = this.pauseTime - this.lastPlayedTime\r\n        }\r\n        else { \r\n            logMessage(\"You tried to unpause a wad that was not played and paused, so it just played normally instead.\", 2)\r\n        }\r\n        this.play(arg)\r\n    }\r\n\r\n/** If multiple instances of a sound are playing simultaneously, stop() only can stop the most recent one **/\r\n    Wad.prototype.stop = function(label){\r\n        if ( !( this.source === 'mic' ) ) {\r\n            if ( !(this.gain && this.gain.length) ){\r\n                logMessage(\"You tried to stop a Wad that never played. \", 2)\r\n                logMessage(this, 2)\r\n                return // if the wad has never been played, there's no need to stop it\r\n            }\r\n            else if ( label ) {\r\n                for ( var i = 0; i < this.gain.length; i++ ) {\r\n                    if ( this.gain[i].label === label ) {\r\n                        this.gain[i].gain.cancelScheduledValues(context.currentTime);\r\n                        this.gain[i].gain.setValueAtTime(this.gain[i].gain.value, context.currentTime);\r\n                        this.gain[i].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);\r\n                    }\r\n                }\r\n            }\r\n            else if ( !label ) {\r\n                this.gain[0].gain.cancelScheduledValues(context.currentTime);\r\n                this.gain[0].gain.setValueAtTime(this.gain[0].gain.value, context.currentTime);\r\n                this.gain[0].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);\r\n                try {\r\n                    this.soundSource.stop(context.currentTime + this.env.release)\r\n                }\r\n                catch(e){\r\n                    /*\r\n                        Safari for iOS (and maybe other browsers)\r\n                        can't seem to handle calling stop() on a soundSource that already had stop() scheduled.\r\n                        The spec says it should be fine, and cancel previous calls to stop, \r\n                        but Safari is throwing an error -- InvalidStateError: The object is in an invalid state.\r\n                        I'm not really sure why this is happening, but at least we can manually run the ended event handler.\r\n                    */\r\n                    logMessage(e,2)\r\n                    var that = this\r\n                    setTimeout(function(){\r\n                        that.soundSource.dispatchEvent(new Event('ended'))\r\n                        that.soundSource.onended = null\r\n                    }, this.env.release * 1000)\r\n                }\r\n            }\r\n        }\r\n        else if (Wad.micConsent ) {\r\n            this.mediaStreamSource.disconnect(0);\r\n        }\r\n        else { logMessage('You have not given your browser permission to use your microphone.')}\r\n        if ( this.tremolo ) {\r\n            this.tremolo.wad.stop()\r\n        }\r\n    };\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    var buflen = 2048;\r\n    var buf = new Uint8Array( buflen );\r\n    var MINVAL = 134;  // 128 == zero.  MINVAL is the \"minimum detected signal\" level.\r\n\r\n    var noteFromPitch = function( frequency ) {\r\n        var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\r\n        return Math.round( noteNum ) + 69;\r\n    }\r\n\r\n    var frequencyFromNoteNumber = function( note ) {\r\n        return 440 * Math.pow(2,(note-69)/12);\r\n    }\r\n\r\n    var centsOffFromPitch = function( frequency, note ) {\r\n        return Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );\r\n    }\r\n\r\n\r\n    function autoCorrelate( buf, sampleRate ) {\r\n        var MIN_SAMPLES = 4;    // corresponds to an 11kHz signal\r\n        var MAX_SAMPLES = 1000; // corresponds to a 44Hz signal\r\n        var SIZE = 1000;\r\n        var best_offset = -1;\r\n        var best_correlation = 0;\r\n        var rms = 0;\r\n        var foundGoodCorrelation = false;\r\n\r\n        if (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES))\r\n            return -1;  // Not enough data\r\n\r\n        for ( var i = 0; i < SIZE; i++ ) {\r\n            var val = ( buf[i] - 128 ) / 128;\r\n            rms += val * val;\r\n        }\r\n        rms = Math.sqrt(rms/SIZE);\r\n        if (rms<0.01)\r\n            return -1;\r\n\r\n        var lastCorrelation=1;\r\n        for (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {\r\n            var correlation = 0;\r\n\r\n            for (var i=0; i<SIZE; i++) {\r\n                correlation += Math.abs(((buf[i] - 128)/128)-((buf[i+offset] - 128)/128));\r\n            }\r\n            correlation = 1 - (correlation/SIZE);\r\n            if ((correlation>0.9) && (correlation > lastCorrelation))\r\n                foundGoodCorrelation = true;\r\n            else if (foundGoodCorrelation) {\r\n                // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\r\n                return sampleRate/best_offset;\r\n            }\r\n            lastCorrelation = correlation;\r\n            if (correlation > best_correlation) {\r\n                best_correlation = correlation;\r\n                best_offset = offset;\r\n            }\r\n        }\r\n        if (best_correlation > 0.01) {\r\n            // logMessage(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\r\n            return sampleRate/best_offset;\r\n        }\r\n        return -1;\r\n    //  var best_frequency = sampleRate/best_offset;\r\n    }\r\n\r\n    function volumeAudioProcess( event ) {\r\n        var buf = event.inputBuffer.getChannelData(0);\r\n        var bufLength = buf.length;\r\n        var sum = 0;\r\n        var x;\r\n    \r\n        // Do a root-mean-square on the samples: sum up the squares...\r\n        for (var i=0; i<bufLength; i++) {\r\n            x = buf[i];\r\n            if (Math.abs(x)>=this.clipLevel) {\r\n                this.clipping = true;\r\n                this.lastClip = window.performance.now();\r\n            }\r\n            sum += x * x;\r\n        }\r\n    \r\n        // ... then take the square root of the sum.\r\n        var rms =  Math.sqrt(sum / bufLength);\r\n    \r\n        // Now smooth this out with the averaging factor applied\r\n        // to the previous sample - take the max here because we\r\n        // want \"fast attack, slow release.\"\r\n        this.volume = Math.max(rms, this.volume*this.averaging);\r\n    }\r\n\r\n    function createAudioMeter(audioContext,clipLevel,averaging,clipLag) {\r\n        var processor = audioContext.createScriptProcessor(512);\r\n        processor.onaudioprocess = volumeAudioProcess;\r\n        processor.clipping = false;\r\n        processor.lastClip = 0;\r\n        processor.volume = 0;\r\n        processor.clipLevel = clipLevel || 0.98;\r\n        processor.averaging = averaging || 0.95;\r\n        processor.clipLag = clipLag || 750;\r\n    \r\n        // this will have no effect, since we don't copy the input to the output,\r\n        // but works around a current Chrome bug.\r\n        processor.connect(audioContext.destination);\r\n    \r\n        processor.checkClipping = function(){\r\n            if (!this.clipping){\r\n                return false;\r\n            }\r\n            if ((this.lastClip + this.clipLag) < window.performance.now()){\r\n                this.clipping = false;\r\n            }\r\n            return this.clipping;\r\n        };\r\n    \r\n        processor.shutdown = function(){\r\n            this.disconnect();\r\n            this.onaudioprocess = null;\r\n        };\r\n    \r\n        return processor;\r\n    }\r\n\r\n    Wad.Poly = function(arg){\r\n        if ( !arg ) { arg = {}; }\r\n        this.isSetUp  = false;\r\n        this.playable = 1;\r\n\r\n        if ( arg.reverb ) {\r\n            constructReverb(this, arg); // We need to make sure we have downloaded the impulse response before continuing with the setup.\r\n        }\r\n        else {\r\n            this.setUp(arg);\r\n        }\r\n    };\r\n\r\n    Wad.Poly.prototype.setUp = function(arg){ // Anything that needs to happen before reverb is set up can go here.\r\n        this.wads              = [];\r\n        this.input             = context.createAnalyser();\r\n        this.input.fftSize     = 2048\r\n        this.nodes             = [this.input];\r\n        this.destination       = arg.destination || context.destination; // the last node the sound is routed to\r\n        this.volume            = arg.volume || 1;\r\n        this.gain              = context.createGain();\r\n        this.gain.gain.value   = this.volume;\r\n        this.output            = context.createAnalyser();\r\n        this.tuna              = arg.tuna || null;\r\n        this.audioMeter        = null;\r\n\r\n        if ( arg.audioMeter ) {\r\n            this.audioMeter = createAudioMeter(context, arg.audioMeter.clipLevel, arg.audioMeter.averaging, arg.audioMeter.clipLag)\r\n            this.output.connect(this.audioMeter);\r\n        }\r\n\r\n        this.globalReverb = arg.globalReverb || false; // deprecated\r\n\r\n        constructFilter(this, arg);\r\n        if ( this.filter ) { createFilters(this, arg); }\r\n\r\n        if ( this.reverb ) { setUpReverbOnPlay(this, arg); }\r\n\r\n        this.constructExternalFx(arg, context);\r\n\r\n        constructPanning(this, arg);\r\n        setUpPanningOnPlay(this, arg);\r\n        if ( arg.compressor ) { constructCompressor(this, arg); }\r\n\r\n        constructDelay(this, arg);\r\n        setUpDelayOnPlay(this, arg);\r\n        setUpTunaOnPlay(this, arg);\r\n        this.nodes.push(this.gain);\r\n        this.nodes.push(this.output);\r\n        plugEmIn(this, arg);\r\n        this.isSetUp = true;\r\n        if ( arg.callback ) { arg.callback(this); }\r\n    }\r\n\r\n    Wad.SoundIterator = function(args){\r\n        return new SoundIterator(args, Wad)\r\n    }\r\n\r\n/**\r\n    The MIT License (MIT)\r\n\r\nCopyright (c) 2014 Chris Wilson\r\n**/\r\n    Wad.Poly.prototype.updatePitch = function( time ) {\r\n        this.input.getByteTimeDomainData( buf );\r\n        var ac = autoCorrelate( buf, context.sampleRate );\r\n\r\n        if ( ac !== -1 && ac !== 11025 && ac !== 12000 ) {\r\n            var pitch = ac;\r\n            this.pitch = Math.floor( pitch ) ;\r\n            var note = noteFromPitch( pitch );\r\n            this.noteName = Wad.pitchesArray[note - 12];\r\n            // Detune doesn't seem to work.\r\n            // var detune = centsOffFromPitch( pitch, note );\r\n            // if (detune == 0 ) {\r\n            //     this.detuneEstimate = 0;\r\n            // } else {\r\n\r\n            //     this.detuneEstimate = detune\r\n            // }\r\n        }\r\n        var that = this;\r\n        that.rafID = window.requestAnimationFrame( function(){ that.updatePitch() } );\r\n    }\r\n\r\n    Wad.Poly.prototype.stopUpdatingPitch = function(){\r\n        cancelAnimationFrame(this.rafID)\r\n    }\r\n\r\n\r\n    Wad.Poly.prototype.setVolume = function(volume){\r\n        if ( this.isSetUp ) {\r\n            this.gain.gain.value = volume;\r\n        }\r\n        else {\r\n            logMessage('This PolyWad is not set up yet.');\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Wad.Poly.prototype.setPitch = function(pitch){\r\n        this.wads.forEach(function(wad){\r\n            \r\n            if ( pitch in Wad.pitches ) {\r\n                if ( wad.soundSource ) {\r\n                    wad.soundSource.frequency.value = Wad.pitches[pitch];\r\n                }\r\n                wad.pitch = Wad.pitches[pitch]\r\n            }\r\n            else {\r\n                if ( wad.soundSource ) {\r\n                    wad.soundSource.frequency.value = pitch;\r\n                }\r\n                wad.pitch = pitch\r\n            }\r\n            return this;\r\n        })\r\n    }\r\n\r\n    Wad.Poly.prototype.play = function(arg){\r\n        if ( this.isSetUp ) {\r\n            if ( this.playable < 1 ) {\r\n                this.playOnLoad    = true;\r\n                this.playOnLoadArg = arg;\r\n            }\r\n            else {\r\n                if ( arg && arg.volume ) {\r\n                    this.gain.gain.value = arg.volume; // if two notes are played with volume set as a play arg, does the second one overwrite the first? maybe input should be an array of gain nodes, like regular wads.\r\n                    arg.volume = undefined; // if volume is set, it should change the gain on the polywad's gain node, NOT the gain nodes for individual wads inside the polywad.\r\n                }\r\n                for ( var i = 0; i < this.wads.length; i++ ) {\r\n                    this.wads[i].play(arg);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            logMessage('This PolyWad is not set up yet.');\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Wad.Poly.prototype.stop = function(arg){\r\n        if ( this.isSetUp ) {\r\n            for ( var i = 0; i < this.wads.length; i++ ) {\r\n                this.wads[i].stop(arg);\r\n            }\r\n        }\r\n    };\r\n\r\n    Wad.Poly.prototype.add = function(wad){\r\n        if ( this.isSetUp ) {\r\n            wad.destination = this.input;\r\n            this.wads.push(wad);\r\n            if ( wad instanceof Wad.Poly ) {\r\n                wad.output.disconnect(0);\r\n                wad.output.connect(this.input);\r\n            }\r\n        }\r\n        else {\r\n            logMessage('This PolyWad is not set up yet.');\r\n        }\r\n        return this;\r\n    };\r\n\r\n\r\n\r\n    Wad.Poly.prototype.remove = function(wad){\r\n        if ( this.isSetUp ) {\r\n            for ( var i = 0; i < this.wads.length; i++ ) {\r\n                if ( this.wads[i] === wad ) {\r\n                    this.wads[i].destination = context.destination;\r\n                    this.wads.splice(i,1);\r\n                    if ( wad instanceof Wad.Poly ) {\r\n                        wad.output.disconnect(0);\r\n                        wad.output.connect(context.destination);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Wad.Poly.prototype.constructExternalFx = function(arg, context){\r\n\r\n    };\r\n\r\n    Wad.stopAll = function(label){\r\n        for ( var i = 0; i < Wad.allWads.length; i++ ) {\r\n            Wad.allWads[i].stop(label)\r\n        }\r\n    }\r\n    Wad.setVolume = function(volume){\r\n        for ( var i = 0; i < Wad.allWads.length; i++ ) {\r\n            Wad.allWads[i].setVolume(volume)\r\n        }\r\n    }\r\n\r\n/** If a Wad is created with reverb without specifying a URL for the impulse response,\r\ngrab it from the defaultImpulse URL **/\r\n    Wad.defaultImpulse = 'https://www.codecur.io/audio/widehall.wav';\r\n\r\n    // This method is deprecated.\r\n    Wad.setGlobalReverb = function(arg){\r\n        Wad.reverb                 = {};\r\n        Wad.reverb.node            = context.createConvolver();\r\n        Wad.reverb.gain            = context.createGain();\r\n        Wad.reverb.gain.gain.value = arg.wet;\r\n        var impulseURL             = arg.impulse || Wad.defaultImpulse;\r\n        var request                = new XMLHttpRequest();\r\n        request.open(\"GET\", impulseURL, true);\r\n        request.responseType = \"arraybuffer\";\r\n\r\n        request.onload = function() {\r\n            context.decodeAudioData(request.response, function (decodedBuffer){\r\n                Wad.reverb.node.buffer = decodedBuffer;\r\n            });\r\n        };\r\n        request.send();\r\n\r\n    };\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n//  Utility function to avoid javascript type conversion bug checking zero values   //\r\n\r\n    var valueOrDefault = function(value, def) {\r\n        var val = (value == null) ? def : value;\r\n        return val;\r\n    };\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n/** This object is a mapping of note names to frequencies. **/\r\n    Wad.pitches = {\r\n        'A0'  : 27.5000,\r\n        'A#0' : 29.1352,\r\n        'Bb0' : 29.1352,\r\n        'B0'  : 30.8677,\r\n        'B#0' : 32.7032,\r\n        'Cb1' : 30.8677,\r\n        'C1'  : 32.7032,\r\n        'C#1' : 34.6478,\r\n        'Db1' : 34.6478,\r\n        'D1'  : 36.7081,\r\n        'D#1' : 38.8909,\r\n        'Eb1' : 38.8909,\r\n        'E1'  : 41.2034,\r\n        'Fb1' : 41.2034,\r\n        'E#1' : 43.6535,\r\n        'F1'  : 43.6535,\r\n        'F#1' : 46.2493,\r\n        'Gb1' : 46.2493,\r\n        'G1'  : 48.9994,\r\n        'G#1' : 51.9131,\r\n        'Ab1' : 51.9131,\r\n        'A1'  : 55.0000,\r\n        'A#1' : 58.2705,\r\n        'Bb1' : 58.2705,\r\n        'B1'  : 61.7354,\r\n        'Cb2' : 61.7354,\r\n        'B#1' : 65.4064,\r\n        'C2'  : 65.4064,\r\n        'C#2' : 69.2957,\r\n        'Db2' : 69.2957,\r\n        'D2'  : 73.4162,\r\n        'D#2' : 77.7817,\r\n        'Eb2' : 77.7817,\r\n        'E2'  : 82.4069,\r\n        'Fb2' : 82.4069,\r\n        'E#2' : 87.3071,\r\n        'F2'  : 87.3071,\r\n        'F#2' : 92.4986,\r\n        'Gb2' : 92.4986,\r\n        'G2'  : 97.9989,\r\n        'G#2' : 103.826,\r\n        'Ab2' : 103.826,\r\n        'A2'  : 110.000,\r\n        'A#2' : 116.541,\r\n        'Bb2' : 116.541,\r\n        'B2'  : 123.471,\r\n        'Cb3' : 123.471,\r\n        'B#2' : 130.813,\r\n        'C3'  : 130.813,\r\n        'C#3' : 138.591,\r\n        'Db3' : 138.591,\r\n        'D3'  : 146.832,\r\n        'D#3' : 155.563,\r\n        'Eb3' : 155.563,\r\n        'E3'  : 164.814,\r\n        'Fb3' : 164.814,\r\n        'E#3' : 174.614,\r\n        'F3'  : 174.614,\r\n        'F#3' : 184.997,\r\n        'Gb3' : 184.997,\r\n        'G3'  : 195.998,\r\n        'G#3' : 207.652,\r\n        'Ab3' : 207.652,\r\n        'A3'  : 220.000,\r\n        'A#3' : 233.082,\r\n        'Bb3' : 233.082,\r\n        'B3'  : 246.942,\r\n        'Cb4' : 246.942,\r\n        'B#3' : 261.626,\r\n        'C4'  : 261.626,\r\n        'C#4' : 277.183,\r\n        'Db4' : 277.183,\r\n        'D4'  : 293.665,\r\n        'D#4' : 311.127,\r\n        'Eb4' : 311.127,\r\n        'E4'  : 329.628,\r\n        'Fb4' : 329.628,\r\n        'E#4' : 349.228,\r\n        'F4'  : 349.228,\r\n        'F#4' : 369.994,\r\n        'Gb4' : 369.994,\r\n        'G4'  : 391.995,\r\n        'G#4' : 415.305,\r\n        'Ab4' : 415.305,\r\n        'A4'  : 440.000,\r\n        'A#4' : 466.164,\r\n        'Bb4' : 466.164,\r\n        'B4'  : 493.883,\r\n        'Cb5' : 493.883,\r\n        'B#4' : 523.251,\r\n        'C5'  : 523.251,\r\n        'C#5' : 554.365,\r\n        'Db5' : 554.365,\r\n        'D5'  : 587.330,\r\n        'D#5' : 622.254,\r\n        'Eb5' : 622.254,\r\n        'E5'  : 659.255,\r\n        'Fb5' : 659.255,\r\n        'E#5' : 698.456,\r\n        'F5'  : 698.456,\r\n        'F#5' : 739.989,\r\n        'Gb5' : 739.989,\r\n        'G5'  : 783.991,\r\n        'G#5' : 830.609,\r\n        'Ab5' : 830.609,\r\n        'A5'  : 880.000,\r\n        'A#5' : 932.328,\r\n        'Bb5' : 932.328,\r\n        'B5'  : 987.767,\r\n        'Cb6' : 987.767,\r\n        'B#5' : 1046.50,\r\n        'C6'  : 1046.50,\r\n        'C#6' : 1108.73,\r\n        'Db6' : 1108.73,\r\n        'D6'  : 1174.66,\r\n        'D#6' : 1244.51,\r\n        'Eb6' : 1244.51,\r\n        'Fb6' : 1318.51,\r\n        'E6'  : 1318.51,\r\n        'E#6' : 1396.91,\r\n        'F6'  : 1396.91,\r\n        'F#6' : 1479.98,\r\n        'Gb6' : 1479.98,\r\n        'G6'  : 1567.98,\r\n        'G#6' : 1661.22,\r\n        'Ab6' : 1661.22,\r\n        'A6'  : 1760.00,\r\n        'A#6' : 1864.66,\r\n        'Bb6' : 1864.66,\r\n        'B6'  : 1975.53,\r\n        'Cb7' : 1975.53,\r\n        'B#6' : 2093.00,\r\n        'C7'  : 2093.00,\r\n        'C#7' : 2217.46,\r\n        'Db7' : 2217.46,\r\n        'D7'  : 2349.32,\r\n        'D#7' : 2489.02,\r\n        'Eb7' : 2489.02,\r\n        'E7'  : 2637.02,\r\n        'Fb7' : 2637.02,\r\n        'E#7' : 2793.83,\r\n        'F7'  : 2793.83,\r\n        'F#7' : 2959.96,\r\n        'Gb7' : 2959.96,\r\n        'G7'  : 3135.96,\r\n        'G#7' : 3322.44,\r\n        'Ab7' : 3322.44,\r\n        'A7'  : 3520.00,\r\n        'A#7' : 3729.31,\r\n        'Bb7' : 3729.31,\r\n        'B7'  : 3951.07,\r\n        'Cb8' : 3951.07,\r\n        'B#7' : 4186.01,\r\n        'C8'  : 4186.01\r\n    };\r\n\r\n\r\n    Wad.pitchesArray = [ // Just an array of note names. This can be useful for mapping MIDI data to notes.\r\n        'C0',\r\n        'C#0',\r\n        'D0',\r\n        'D#0',\r\n        'E0',\r\n        'F0',\r\n        'F#0',\r\n        'G0',\r\n        'G#0',\r\n        'A0',\r\n        'A#0',\r\n        'B0',\r\n        'C1',\r\n        'C#1',\r\n        'D1',\r\n        'D#1',\r\n        'E1',\r\n        'F1',\r\n        'F#1',\r\n        'G1',\r\n        'G#1',\r\n        'A1',\r\n        'A#1',\r\n        'B1',\r\n        'C2',\r\n        'C#2',\r\n        'D2',\r\n        'D#2',\r\n        'E2',\r\n        'F2',\r\n        'F#2',\r\n        'G2',\r\n        'G#2',\r\n        'A2',\r\n        'A#2',\r\n        'B2',\r\n        'C3',\r\n        'C#3',\r\n        'D3',\r\n        'D#3',\r\n        'E3',\r\n        'F3',\r\n        'F#3',\r\n        'G3',\r\n        'G#3',\r\n        'A3',\r\n        'A#3',\r\n        'B3',\r\n        'C4',\r\n        'C#4',\r\n        'D4',\r\n        'D#4',\r\n        'E4',\r\n        'F4',\r\n        'F#4',\r\n        'G4',\r\n        'G#4',\r\n        'A4',\r\n        'A#4',\r\n        'B4',\r\n        'C5',\r\n        'C#5',\r\n        'D5',\r\n        'D#5',\r\n        'E5',\r\n        'F5',\r\n        'F#5',\r\n        'G5',\r\n        'G#5',\r\n        'A5',\r\n        'A#5',\r\n        'B5',\r\n        'C6',\r\n        'C#6',\r\n        'D6',\r\n        'D#6',\r\n        'E6',\r\n        'F6',\r\n        'F#6',\r\n        'G6',\r\n        'G#6',\r\n        'A6',\r\n        'A#6',\r\n        'B6',\r\n        'C7',\r\n        'C#7',\r\n        'D7',\r\n        'D#7',\r\n        'E7',\r\n        'F7',\r\n        'F#7',\r\n        'G7',\r\n        'G#7',\r\n        'A7',\r\n        'A#7',\r\n        'B7',\r\n        'C8'\r\n    ];\r\n//////////////////////////////////////////////////////////////\r\n    Wad.assignMidiMap = function(midiMap, which, success, failure){\r\n        var which = which || 0;\r\n        navigator.requestMIDIAccess().then(function(){\r\n            if ( Wad.midiInputs[which] ) {\r\n                Wad.midiInputs[which].onmidimessage = midiMap;\r\n                if  ( typeof success === 'function' ) { success() }\r\n            }\r\n            else if ( typeof failure === 'function' ) { failure() }\r\n\r\n        })\r\n\r\n    }\r\n    Wad.midiInstrument = {\r\n        play : function() { logMessage('playing midi')  },\r\n        stop : function() { logMessage('stopping midi') }\r\n    };\r\n    Wad.midiInputs  = [];\r\n\r\n    var midiMap = function(event){\r\n        logMessage(event.receivedTime, event.data, 2);\r\n        if ( event.data[0] === 144 ) { // 144 means the midi message has note data\r\n            if ( event.data[2] === 0 ) { // noteOn velocity of 0 means this is actually a noteOff message\r\n                logMessage(\"Playing note: \", 2)\r\n                logMessage(Wad.pitchesArray[event.data[1]-12], 2);\r\n                Wad.midiInstrument.stop(Wad.pitchesArray[event.data[1]-12]);\r\n            }\r\n            else if ( event.data[2] > 0 ) {\r\n                logMessage(\"Stopping note: \", 2)\r\n                logMessage(Wad.pitchesArray[event.data[1]-12], 2);\r\n                Wad.midiInstrument.play({pitch : Wad.pitchesArray[event.data[1]-12], label : Wad.pitchesArray[event.data[1]-12], callback : function(that){\r\n                }})\r\n            }\r\n        }\r\n        else if ( event.data[0] === 176 ) { // 176 means the midi message has controller data\r\n            logMessage('controller');\r\n            if ( event.data[1] == 46 ) {\r\n                if ( event.data[2] == 127 ) { Wad.midiInstrument.pedalMod = true; }\r\n                else if ( event.data[2] == 0 ) { Wad.midiInstrument.pedalMod = false; }\r\n            }\r\n        }\r\n        else if ( event.data[0] === 224 ) { // 224 means the midi message has pitch bend data\r\n            logMessage('pitch bend');\r\n        }\r\n    };\r\n\r\n\r\n    var onSuccessCallback = function(midiAccess){\r\n\r\n        Wad.midiInputs = []\r\n        var val = midiAccess.inputs.values();\r\n        for ( var o = val.next(); !o.done; o = val.next() ) {\r\n            Wad.midiInputs.push(o.value)\r\n        }\r\n        // Wad.midiInputs = [m.inputs.values().next().value];   // inputs = array of MIDIPorts\r\n        logMessage('MIDI inputs: ')\r\n        logMessage(Wad.midiInputs)\r\n        // var outputs = m.outputs(); // outputs = array of MIDIPorts\r\n        for ( var i = 0; i < Wad.midiInputs.length; i++ ) {\r\n            Wad.midiInputs[i].onmidimessage = midiMap; // onmidimessage( event ), event.data & event.receivedTime are populated\r\n        }\r\n        // var o = m.outputs()[0];           // grab first output device\r\n        // o.send( [ 0x90, 0x45, 0x7f ] );     // full velocity note on A4 on channel zero\r\n        // o.send( [ 0x80, 0x45, 0x7f ], window.performance.now() + 1000 );  // full velocity A4 note off in one second.\r\n    };\r\n    var onErrorCallback = function(err){\r\n        logMessage(\"Failed to get MIDI access\", err);\r\n    };\r\n\r\n    if ( navigator && navigator.requestMIDIAccess ) {\r\n        try {\r\n            navigator.requestMIDIAccess().then(onSuccessCallback, onErrorCallback);\r\n        }\r\n        catch(err) {\r\n            logMessage(\"Failed to get MIDI access\", err);\r\n        }\r\n    }\r\n\r\n\r\n    Wad.presets = {\r\n        hiHatClosed : { source : 'noise', env : { attack : .001, decay : .008, sustain : .2, hold : .03, release : .01}, filter : { type : 'highpass', frequency : 400, q : 1 } },\r\n        snare : { source : 'noise', env : {attack : .001, decay : .01, sustain : .2, hold : .03, release : .02}, filter : {type : 'bandpass', frequency : 300, q : .180 } },\r\n        hiHatOpen : { source : 'noise', env : { attack : .001, decay : .008, sustain : .2, hold : .43, release : .01}, filter : { type : 'highpass', frequency : 100, q : .2 } },\r\n        ghost : { source : 'square', volume : .3, env : { attack : .01, decay : .002, sustain : .5, hold : 2.5, release : .3 }, filter : { type : 'lowpass', frequency : 600, q : 7, env : { attack : .7, frequency : 1600 } }, vibrato : { attack : 8, speed : 8, magnitude : 100 } },\r\n        piano : { source : 'square', volume : 1.4, env : { attack : .01, decay : .005, sustain : .2, hold : .015, release : .3 }, filter : { type : 'lowpass', frequency : 1200, q : 8.5, env : { attack : .2, frequency : 600 } } }\r\n    };\r\n\r\n    Wad.logs = logStuff\r\n\r\n    return Wad;\r\n\r\n\r\n})()\r\n\r\nif(typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Wad;\r\n}\r\n\r\nexport default Wad;\r\n\r\n"],"sourceRoot":""}